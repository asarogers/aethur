import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { GoogleOAuthProvider } from '@react-oauth/google';
import "katex/dist/katex.min.css";



const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <GoogleOAuthProvider clientId="119387553466-o6sto2i9dji0iokgrfa0dv89tmijpcm3.apps.googleusercontent.com">
    <App />
    </GoogleOAuthProvider>
  </React.StrictMode>
);

import { useEffect } from "react";
import { useParams } from "react-router-dom";

const Docs = () => {
  const { id } = useParams();

  useEffect(() => {
    if (id) {
      window.location.href = `/${id}`;
    }
  }, [id]);

  return <p>Redirecting to document...</p>;
};

export default Docs;

import { Container } from "@mui/material"
import Navbar from "../../components/Navbar"
import HeroSection from "./sections/HeroSection"
import Newsletter from "../landing/sections/Newsletter"
import Footer from "../../components/Footer"
import Projects from "./sections/Projects"

export default function Portfolio(){
    return(
        <Container
        sx={{
            position: "relative",
            minHeight: "100vh", // Changed to 100vh
            paddingBottom: "3rem",
            backgroundImage: `linear-gradient(rgba(10,10,10,0.25), rgba(10,10,10,0.8))`,
            backgroundSize: "cover",
            backgroundPosition: "center",
            backgroundRepeat: "no-repeat",
          }}
          >
            < Navbar/>
            <HeroSection />
            <Projects />
            <Newsletter/>

        </Container>
    )
}import React from "react";
import { Box, Container, Typography, Paper, Button, Stack } from "@mui/material";
import backgroundImage from "../imgs/hero-background.png";

const HeroSection = () => {
  return (
    <Box
    sx={{
      textAlign: "center",
      padding: "3rem 0",
      background: `url(${backgroundImage}) no-repeat center center`,
      backgroundSize: "cover",
    }}
    >
      <Typography
          variant="h3"
          sx={{ fontWeight: "bold", color: "#fff", marginBottom: "3rem" }}
        >
          My{" "}
          <span
            style={{
              background: "linear-gradient(to top, #FF861D, #FBDF02)",
              WebkitBackgroundClip: "text",
              backgroundClip: "text",
              color: "transparent",
            }}
          >
            Projects
          </span>
        </Typography>

    </Box>
  );
};

export default HeroSection;
import React from "react";
import {
  Box,
  Container,
  Typography,
  Card,
  CardContent,
  CardMedia,
  Button,
  Grid,
  Avatar,
  Stack,
} from "@mui/material";
import { useNavigate } from "react-router-dom";

import tamir from "../imgs/TAMIR/tamirVideo.mp4";
import project2 from "../imgs/project2.png";
import project3 from "../imgs/project3.png";
import backgroundImage from "../imgs/hero-background.png";
import asaImg from "../imgs/asarogers.jpeg";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowRight } from "@fortawesome/free-solid-svg-icons";
import { faGithub } from "@fortawesome/free-brands-svg-icons";
import { projects } from "../../../data/projects"


const trimSummary = (text, maxSentences = 3) => {
  const sentences = text.match(/[^.!?]+[.!?]+/g);
  if (!sentences) return text;
  return sentences.length > maxSentences
    ? sentences.slice(0, maxSentences).join(" ").trim() + "..."
    : text;
};

const Projects = () => {
  const navigate = useNavigate();

  const handleProjectClick = (id) => {
    navigate(`/portfolio/projectCard/${id}`);
  };

  return (
    <Container maxWidth="lg">
      <Grid container spacing={4}>
        {projects.map((project) => (
          <Grid item xs={12} sm={6} md={4} key={project.id}>
            <Card
              sx={{
                display: "flex",
                flexDirection: "column",
                justifyContent: "space-between",
                height: "100%",
                border: "1px solid rgba(255, 255, 255, 0.3)",
                backgroundColor: "rgba(102, 102, 102, 0.25)",
                color: "#fff",
                borderRadius: 4,
                overflow: "hidden",
                boxShadow: 3,
                cursor: "pointer",
              }}
              onClick={() => handleProjectClick(project.id)}
            >
              {project.type === "video" ? (
                <CardMedia
                  component="video"
                  src={project.media}
                  autoPlay
                  muted
                  loop
                  sx={{ width: "100%", height: "200px", objectFit: "cover" }}
                />
              ) : (
                <CardMedia
                  component="img"
                  image={project.media}
                  height="200"
                  alt="project image"
                />
              )}

              <CardContent
                sx={{
                  flexGrow: 1,
                  display: "flex",
                  flexDirection: "column",
                  gap: 1,
                }}
              >
                <Typography
                  variant="subtitle1"
                  color="#FDD835"
                  fontWeight="bold"
                >
                  {project.section}
                </Typography>

                <Typography variant="h6">{project.title}</Typography>

                <Typography variant="body2" color="#ccc">
                  {trimSummary(project.summary)}
                </Typography>
              </CardContent>

              {/* Footer at the bottom */}
              <Box sx={{ px: 2, pb: 2 }}>
                <Stack
                  direction="row"
                  alignItems="center"
                  justifyContent="space-between"
                >
                  <Stack direction="row" alignItems="center" spacing={1}>
                    <Avatar
                      alt="Asa Rogers"
                      src={asaImg}
                      sx={{ width: 30, height: 30 }}
                    />
                    <Typography variant="caption" color="white">
                      Asa Rogers
                      <br />
                      <Typography variant="caption" color="#aaa">
                        {project.year}
                      </Typography>
                    </Typography>
                  </Stack>

                  <Stack direction="row" spacing={1}>
                    <Button
                      size="large"
                      variant="contained"
                      onClick={() => handleProjectClick(project.id)}
                      sx={{
                        background: "linear-gradient(to top, #FF861D, #FBDF02)",
                        color: "#000",
                        fontWeight: "bold",
                        textTransform: "none",
                        borderRadius: "20px",
                        px: 2,
                        display: "flex",
                        alignItems: "center",
                        gap: 1,
                        fontSize: "0.85rem",
                        transition: "all 0.3s ease",
                        "&:hover": {
                          background:
                            "linear-gradient(to top, #F5C700, #D87814)",
                          boxShadow: "0 10px 15px rgba(0, 0, 0, 0.3)",
                          transform: "scale(1.05)",
                          color: "#fff",
                        },
                      }}
                    >
                      View{" "}
                      <FontAwesomeIcon
                        icon={faArrowRight}
                        style={{ fontSize: "1.2rem" }}
                      />
                    </Button>
                    <Button
                      size="small"
                      variant="outlined"
                      onClick={(e) => {
                        e.stopPropagation();
                        window.open(
                          "https://github.com/asarogers/TAMIR",
                          "_blank"
                        );
                      }}
                      sx={{
                        zIndex: "10",
                        borderColor: "#fff",
                        color: "#fff",
                        borderRadius: "20px",
                        textTransform: "none",
                        px: 2,
                        display: "flex",
                        alignItems: "center",
                        gap: 1,
                        "&:hover": {
                          backgroundColor: "#fff",
                          color: "#000",
                        },
                      }}
                    >
                      <FontAwesomeIcon
                        icon={faGithub}
                        style={{ fontSize: "1.2rem" }}
                      />
                      Github
                    </Button>
                  </Stack>
                </Stack>
              </Box>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Container>
  );
};

export default Projects;
import React from "react";
import { Box, Typography, Container, Chip, Grid } from "@mui/material";

export default function HeroSection({ heroImage }) {
  return (
    <Box
      sx={{
        backgroundColor: "black",
        paddingY: { xs: "2rem", md: "3rem" }, // Adjust vertical padding
        minHeight: "50vh", // Maintain good visibility
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
      }}
    >
      <Container maxWidth="lg">
        <Grid container spacing={3} alignItems="center">
          {/* Left Content Section */}
          <Grid item xs={12} md={6}>
            <Box display="flex" alignItems="center" gap={1} marginBottom={1}>
              <Chip
                label="🐶 AI-Powered Pet Training"
                sx={{
                  backgroundColor: "rgba(255, 138, 0, 0.15)",
                  color: "#FF861D",
                  fontWeight: "bold",
                }}
              />
              <Chip
                label="5 min read"
                sx={{
                  backgroundColor: "rgba(255, 255, 255, 0.1)",
                  color: "#aaa",
                }}
              />
            </Box>

            <Typography
              variant="h4"
              sx={{ fontWeight: "bold", color: "white", marginBottom: "0.5rem" }}
            >
              Meet Tamer — The Training Assisted Mobile Intelligent Robot
            </Typography>
            <Typography
              variant="body1"
              sx={{ color: "rgba(255, 255, 255, 0.8)", marginBottom: "0rem" }}
            >
              An autonomous AI-powered system that monitors your pet, detects unwanted behavior, and delivers timely corrective signals to keep your home peaceful and your pet safe.
            </Typography>
          </Grid>

          {/* Right Image Section */}
          <Grid item xs={12} md={6}>
            <Box
              sx={{
                borderRadius: "12px",
                overflow: "hidden",
                boxShadow: "0px 4px 15px rgba(255, 190, 70, 0.2)",
                textAlign: "center",
              }}
            >
              <video
                src={heroImage}
                autoPlay
                loop
                muted
                style={{
                  width: "100%",
                  maxHeight: "600px", // Maintain balance
                  borderRadius: "12px",
                  objectFit: "cover",
                }}
              />
            </Box>
          </Grid>
        </Grid>
      </Container>
    </Box>
  );
}
import React from "react";
import { Box, Container, Typography, Button, Grid, Paper } from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";
import { Facebook, Twitter, LinkedIn } from "@mui/icons-material";
import project1 from "../../imgs/project1.png";
import project2 from "../../imgs/project2.png";
import project3 from "../../imgs/project3.png";
import article1 from "../../imgs/article1.png";
import article2 from "../../imgs/article2.png";
import article3 from "../../imgs/article3.png";
import HeroSection from "./HeroSection";
import Navbar from "../../../../components/Navbar";
import Body from "./Body"
import OtherProjects from "./OtherProjects"
import tamirVideo from "../../imgs/TAMIR/tamirVideo.mp4"

import { projectData } from "../../../../data/projectDetails";
import { relatedArticles } from "../../../../data/relatedArticles";


const ProjectCard = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const project = projectData[id];

  if (!project)
    return (
      <Typography variant="h5" sx={{ color: "red", textAlign: "center", marginTop: "2rem" }}>
        Project Not Found
      </Typography>
    );

  return (
    <Box sx={{ backgroundColor: "black", color: "white" }}>


      {/* Main Content */}
      <Container maxWidth="lg">
        < Navbar />
        {/* Hero Section */}
        <HeroSection heroImage={project.img} />
        < Body/>
        < OtherProjects/>
      </Container>
    </Box>
  );
};

export default ProjectCard;
import React from "react";
import {
  Box,
  Container,
  Typography,
  Grid,
  Card,
  CardContent,
  CardMedia,
} from "@mui/material";
import { otherProjects } from "../../../../data/otherProjects";
import logo from "../../../../images/Final Logo/standAloneLogo.jpg"
const name = "Aethur Tech"



const projects = otherProjects

const OtherProjects = () => {
  return (
    <Box sx={{ backgroundColor: "#121212", py: 5 }}>
      <Container maxWidth="lg">
        <Typography variant="h4" sx={{ color: "white", mb: 4, textAlign: "center" }}>
          Other Projects
        </Typography>
        <Grid container spacing={3} justifyContent="center">
          {projects.map((project) => (
            <Grid item xs={12} sm={6} md={4} key={project.id}>
              <Card
                sx={{
                  backgroundColor: "#1E1E1E",
                  color: "white",
                  borderRadius: "10px",
                  boxShadow: 3,
                }}
              >
                <CardMedia
                  component="img"
                  height="200"
                  image={project.img}
                  alt={project.title}
                />
                <CardContent>
                  <Typography
                    variant="subtitle2"
                    sx={{ color: "#FDD835", textTransform: "uppercase", fontWeight: 600 }}
                  >
                    {project.category}
                  </Typography>
                  <Typography variant="h6" sx={{ fontWeight: "bold", mt: 1 }}>
                    {project.title}
                  </Typography>
                  <Typography
                    variant="body2"
                    sx={{ color: "rgba(255,255,255,0.7)", mt: 1 }}
                  >
                    {project.description}
                  </Typography>
                  <Box sx={{ display: "flex", alignItems: "center", mt: 2 }}>
                    <img src={logo} style={{width: 40, borderRadius: "25px", marginRight: "5px"}}>
                    </img>
                    <Typography variant="caption" sx={{ color: "gray" }}>
                      {project.author} • {project.date}
                    </Typography>
                  </Box>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      </Container>
    </Box>
  );
};

export default OtherProjects;
// Sidebar.js
import React, { useEffect, useState } from "react";
import {
  Box,
  Typography,
  Button,
  Divider,
  Grid,
  IconButton,
} from "@mui/material";
import {
  LinkedIn,
} from "@mui/icons-material";
import { useGoogleLogin } from "@react-oauth/google";
import googleLogo from "../../../../images/google.png";

export default function Sidebar({ sections }) {
  const [activeSection, setActiveSection] = useState("");

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const id = entry.target.getAttribute("id");
            setActiveSection(id);
          }
        });
      },
      { threshold: 0.5 }
    );

    sections.forEach((section) => {
      const id = section.replace(/\s+/g, "-").toLowerCase();
      const element = document.getElementById(id);
      if (element) observer.observe(element);
    });

    return () => observer.disconnect();
  }, [sections]);

  const loginWithGoogle = useGoogleLogin({
    onSuccess: async (tokenResponse) => {
      try {
        const res = await fetch(
          "https://www.googleapis.com/oauth2/v3/userinfo",
          {
            headers: {
              Authorization: `Bearer ${tokenResponse.access_token}`,
            },
          }
        );
        const data = await res.json();

        await fetch("/api/send-email", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            name: `${data.given_name} ${data.family_name}`,
            email: data.email,
          }),
        });
      } catch (error) {
        console.error("Failed to fetch user info:", error);
      }
    },
    onError: () => {
      console.log("Login Failed");
    },
  });

  return (
    <Box
      sx={{
        width: { xs: "100%", md: "240px" },
        position: { md: "sticky" },
        top: "100px",
        backgroundColor: "#111",
        padding: "1.5rem",
        borderRadius: "12px",
        color: "white",
      }}
    >
      {/* Table of Contents */}
      <Typography
        variant="h6"
        sx={{ fontWeight: "bold", color: "#FFCA28", marginBottom: "1rem" }}
      >
        Sections
      </Typography>
      {sections.map((section, index) => {
        const id = section.replace(/\s+/g, "-").toLowerCase();
        const isActive = activeSection === id;

        return (
          <Typography
            key={index}
            variant="body2"
            onClick={() => {
              const yOffset = -100;
              const element = document.getElementById(id);
              const y =
                element.getBoundingClientRect().top +
                window.pageYOffset +
                yOffset;
              window.scrollTo({ top: y, behavior: "smooth" });
            }}
            sx={{
              marginBottom: "0.5rem",
              cursor: "pointer",
              fontWeight: isActive ? "bold" : "normal",
              color: isActive ? "#FFCA28" : "#fff",
              transition: "color 0.3s ease",
              "&:hover": { color: "#FFCA28" },
            }}
          >
            {section}
          </Typography>
        );
      })}

      <Divider
        sx={{
          backgroundColor: "rgba(255, 255, 255, 0.2)",
          marginBottom: "1rem",
        }}
      />

      {/* Newsletter Section */}
      <Box sx={{ marginTop: "1rem" }}>
        <Typography
          variant="body1"
          sx={{ fontWeight: "bold", color: "#FFCA28", marginBottom: "0.5rem" }}
        >
          Connect with me
        </Typography>

        <Typography variant="body2" sx={{ color: "#fff", marginBottom: "0.5rem" }}>
          No spam — just project updates and occasional insights.
        </Typography>

        <Button
          onClick={loginWithGoogle}
          variant="contained"
          fullWidth
          sx={{
            backgroundColor: "#fff",
            color: "#000",
            fontWeight: "bold",
            borderRadius: "30px",
            fontSize: "0.9rem",
            padding: "8px 20px",
            textTransform: "none",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            gap: 1,
            boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.1)",
            "&:hover": { backgroundColor: "#f1f1f1" },
          }}
        >
          <Box
            component="img"
            src={googleLogo}
            alt="Google"
            sx={{ width: 18, height: 18 }}
          />
          Google
        </Button>
      </Box>

      <Divider
        sx={{ backgroundColor: "rgba(255, 255, 255, 0.2)", margin: "1rem 0" }}
      />

      {/* Social Media Icons */}
      <Grid container justifyContent="center" spacing={1}>
        <Grid item>
          <a
            href="https://www.linkedin.com/in/asa-ace-rogers-4476531b7"
            target="_blank"
            rel="noopener noreferrer"
            style={{ textDecoration: "none" }}
          >
            <IconButton
              sx={{
                backgroundColor: "#222",
                color: "#fff",
                "&:hover": { backgroundColor: "#FFCA28", color: "#000" },
              }}
            >
              <LinkedIn />
            </IconButton>
          </a>
        </Grid>
      </Grid>
    </Box>
  );
}
import { motion } from "framer-motion";
import React from "react";
import { Container, Typography, Grid } from "@mui/material";
import { useParams } from "react-router-dom";
import Sidebar from "./Sidebar";
import { projectData } from "../../../../data/projectDetails";
import SectionBlock from "../../../../components/SectionBlock";

const Body = () => {
  const { id } = useParams();
  const project = projectData[id];

  if (!project)
    return (
      <Typography
        variant="h5"
        sx={{ color: "red", textAlign: "center", marginTop: "2rem" }}
      >
        Project Not Found
      </Typography>
    );

  const sectionTitles = [
    "Problem Statement",
    ...project.sections.map((section) => section.subtitle),
  ];

  return (
    <Container maxWidth="lg" sx={{ color: "#ddd", paddingTop: "1rem" }}>
      <Grid container spacing={0}>
        <Grid item xs={12} md={4}>
          <Sidebar sections={sectionTitles} />
        </Grid>

        <Grid
          item
          xs={12}
          md={8}
          sx={{
            backgroundColor: "rgba(46, 46, 46, 0.4)",
            borderRadius: "10px",
            border: "1px solid rgba(248, 248, 248, 0.2)",
          }}
        >
          <motion.div
            id="problem-statement" // ✅ This ID must match Sidebar scroll tracking
            initial={{ opacity: 0, y: 40 }}
            whileInView={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 40 }}
            transition={{
              duration: 0.8,
              ease: [0.25, 0.46, 0.45, 0.94],
            }}
            viewport={{ once: false, amount: 0.3 }}
          >
            <SectionBlock
              section={{
                subtitle: "Problem Statement",
                content: project.introText,
              }}
            />
          </motion.div>

          {project.sections.map((section, index) => (
            <motion.div
              key={index}
              id={section.subtitle.replace(/\s+/g, "-").toLowerCase()}
              initial={{ opacity: 0, y: 40 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{
                duration: 0.8,
                ease: [0.25, 0.46, 0.45, 0.94],
              }}
              viewport={{ once: false, amount: 0.3 }}
            >
              <SectionBlock section={section} />
            </motion.div>
          ))}
        </Grid>
      </Grid>
    </Container>
  );
};

export default Body;
import { Box } from "@mui/material";
import { useEffect, useRef, useState } from "react";
import * as THREE from 'three';

const Canvas = () => {
  const canvasRef = useRef(null);
  const [pageHeight, setPageHeight] = useState(window.innerHeight);

  useEffect(() => {
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x000000);
    const camera = new THREE.PerspectiveCamera(125, window.innerWidth / window.innerHeight, 0.1, 2000);
    camera.position.z = 2;

    const renderer = new THREE.WebGLRenderer({
      canvas: canvasRef.current,
      antialias: true
    });

    const updateSize = () => {
      const totalHeight = document.body.scrollHeight; // Get full height of the page
      setPageHeight(totalHeight);
      renderer.setSize(window.innerWidth, totalHeight);
      camera.aspect = window.innerWidth / totalHeight;
      camera.updateProjectionMatrix();
    };

    updateSize();

    window.addEventListener('resize', updateSize);

    const animate = () => {
      requestAnimationFrame(animate);
      renderer.render(scene, camera);
    };

    animate();

    // Create gradient shader material
    const createGlowLayer = (radius, opacity, x, y) => {
      const geometry = new THREE.CircleGeometry(radius, 64);
      // Define shader materials
      const vertexShader = `
        varying vec2 vUv;
        void main() {
          vUv = uv;
          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        }
      `;
      const fragmentShader = `
        varying vec2 vUv;
        uniform float opacity;
        void main() {
          vec3 color1 = vec3(1.0, 0.67, 0.0); // Warmer yellow #ffaa00
          vec3 color2 = vec3(0.8, 0.5, 0.0); // Darker orange
          // Create gradient based on y position
          vec3 finalColor = mix(color1, color2, vUv.y);
          // Add radial falloff
          float dist = length(vUv - vec2(0.5));
          float alpha = opacity * (1.0 - smoothstep(0.0, 0.5, dist));
          gl_FragColor = vec4(finalColor, alpha);
        }
      `;
      const material = new THREE.ShaderMaterial({
        vertexShader,
        fragmentShader,
        transparent: true,
        uniforms: {
          opacity: { value: opacity }
        }
      });
      const mesh = new THREE.Mesh(geometry, material);
      mesh.position.x = x;
      mesh.position.y = y;
      return mesh;
    };

    // Calculate opacity values
    const division = 4 / 5;
    const opacities = Array(8).fill(0).map((_, i) => {
      if (i === 0) return 0.025;
      return 0.15 * Math.pow(division, i);
    });

    const layers = [
      { radius: 0.3, opacity: opacities[0] },
      { radius: 0.7, opacity: opacities[1] },
      { radius: 0.5, opacity: opacities[2] },
      { radius: 0.6, opacity: opacities[3] },
      { radius: 0.7, opacity: opacities[4] },
      { radius: 0.8, opacity: opacities[5] },
      { radius: 0.9, opacity: opacities[6] },
      { radius: 1.0, opacity: opacities[7] }
    ];

    // Create two arrays to hold all the meshes
    const allLayers = [];

    // Create and add all layers to the scene
    layers.forEach(({ radius, opacity }) => {
      const layer1 = createGlowLayer(radius, opacity, -1, 2.3);
      const layer2 = createGlowLayer(radius, opacity, 1, 1.7);
      const layer3 = createGlowLayer(radius, opacity, 0, 1);

      scene.add(layer1);
      scene.add(layer2);
      scene.add(layer3);

      // Store both layers for cleanup
      allLayers.push(layer1, layer2, layer3);
      // allLayers.push(layer1, layer2);
    });


    return () => {
      window.removeEventListener('resize', updateSize);
      renderer.dispose();
    };
  }, []);

  return (
    <canvas
      ref={canvasRef}
      style={{
        position: 'absolute',  // Keep it absolute so elements scroll past it
        top: 0,
        left: 0,
        width: '100vw',
        height: `${pageHeight}px`,  // Make it match total page height
        display: 'block',
        zIndex: 2
      }}
    />
  );
};

export default Canvas;import React from "react";
import { Box, Typography, Button, TextField, Container } from "@mui/material";
import { useGoogleLogin } from "@react-oauth/google";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import googleLogo from "../../../images/google.png";

export default function Newsletter() {
  const loginWithGoogle = useGoogleLogin({
    onSuccess: async (tokenResponse) => {
      try {
        const res = await fetch("https://www.googleapis.com/oauth2/v3/userinfo", {
          headers: {
            Authorization: `Bearer ${tokenResponse.access_token}`,
          },
        });
        const data = await res.json();
        console.log("User info:", data.email, data.given_name, data.family_name);

        await fetch("/api/send-email", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            name: `${data.given_name} ${data.family_name}`,
            email: data.email,
          }),
        });

        
      } catch (error) {
        console.error("Failed to fetch user info:", error);
      }
    },
    onError: () => {
      console.log("Login Failed");
    },
  });
  

  return (
    <Container
      sx={{ width: "100%", justifyContent: "center", display: "flex" }}
    >
      <Box
        sx={{
          marginTop: "4rem",
          padding: "1rem",
          background: "linear-gradient(to top, #FF861D, #FBDF02)", // Updated gradient
          borderRadius: "15px",
          boxShadow: "0px 4px 20px rgba(255, 190, 70, 0.3)",
          width: "70%",
        }}
      >
        {/* FLEX CONTAINER FOR LEFT & RIGHT SECTIONS */}
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between", // Pushes left & right apart
            alignItems: "center",
            width: "100%",
            flexWrap: "wrap", // Ensures responsiveness
            gap: 1,
          }}
        >
          {/* Left Section (Text) */}
          <Box sx={{ width: { xs: "100%", md: "45%" }, textAlign: "left" }}>
            <Typography
              variant="h5"
              sx={{ color: "#000", fontWeight: "bold", marginBottom: "0.5rem" }}
            >
              Stay in Touch
            </Typography>

            {/* Description */}
            <Typography
              variant="body1"
              sx={{ color: "#000", maxWidth: "500px" }}
            >
              No spam—just real insights, honest updates and project showcases
            </Typography>
          </Box>

          {/* Right Section (Input Field & Button) */}
          <Box
            sx={{
              width: { xs: "100%", md: "48%" },
              display: "flex",
              alignItems: "center",
              justifyContent: "space-between", // Pushes TextField left and Button right
              backgroundColor: "rgba(219, 219, 219, 0.65)",
              padding: "0px",
              borderRadius: "30px",
              boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.1)", // Soft shadow
            }}
          >
            <Typography
            variant="h7"
              sx={{
                textAlign: "center",
                
                borderRadius: "30px",
                flexGrow: 1,
                backgroundColor: "transparent",
              }}
            >
              {" "}
              Share your email
            </Typography>

            {/* Subscribe Button Aligned Right */}
            <Button
              onClick={loginWithGoogle}
              variant="contained"
              sx={{
                backgroundColor: "#fff",
                color: "#000",
                fontWeight: "bold",
                borderRadius: "30px", 
                fontSize: "1.1rem" ,
                padding: "10px 25px",
                textTransform: "none",
                boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.1)",
                display: "flex",
                alignItems: "center",
                gap: 1,
                "&:hover": {
                  backgroundColor: "#f1f1f1",
                },
              }}
            >
              
              <Box
                component="img"
                src={googleLogo}
                alt="Google"
                sx={{ width: 20, height: 20, ml: 1}}
              />
              With Google
            </Button>
          </Box>
        </Box>
      </Box>
    </Container>
  );
}
import React from "react";
import { AppBar, Toolbar, Typography, Box, Button, Grid, Container } from "@mui/material";
import backgroundImage from "../img/background1.png"; // Import background image
import campusConnex from "../../../images/campusConnex.png"; //campusConnex.png
import commercial from "../../../images/commercial.mp4"
import CustomLabel from "../../../components/CustomLabel"

export default function HeroSection() {
    return (
        <Box
            sx={{
                position: "relative",
                backgroundColor: "#0a0a0a", // Fallback color
                color: "#fff",
                minHeight: "100%",
                paddingBottom: "3rem",
                backgroundImage: `linear-gradient(rgba(10,10,10,0.25), rgba(10,10,10,0.8)), url(${backgroundImage})`,
                backgroundSize: "cover",
                backgroundPosition: "center",
                backgroundRepeat: "no-repeat",
            }}
        >
        <Grid
            container
            spacing={1}
            alignItems="center"
            sx={{
                marginTop: "4rem",
                justifyContent: { xs: "center", md: "flex-start" },
            }}
        >
            {/* Left Side - Text Content */}
            <Grid
                item
                xs={12}
                md={6}
                sx={{
                    textAlign: { xs: "center", md: "left" },
                    display: "flex",
                    flexDirection: "column",
                    alignItems: { xs: "center", md: "flex-start" },
                    marginBottom: "20px",
                }}
            >
                <Box>
                <CustomLabel label = "AETHER TECH"> </CustomLabel>
                    <Typography
                        variant="h3"
                        sx={{
                            fontWeight: "bold",
                            margin: "1rem 0",
                            lineHeight: "1.2",
                            fontSize: "clamp(1.5rem, 4vw, 3rem)",
                        }}
                    >
                        Expert Mobile App <br />
                        <span style={{ color: "#FFC107" }}>Development</span> for <br />
                        Your Vision
                    </Typography>
                    <Typography
                        variant="body1"
                        sx={{
                            marginBottom: "2rem",
                            color: "#aaa",
                            fontSize: "clamp(0.75rem, 1.5vw, 1.2rem)",
                            maxWidth: { xs: "100%", md: "80%" },
                        }}
                    >
                        We create tailored mobile apps that turn your ideas into innovative solutions for
                        growth.
                    </Typography>
                    <Box
                        sx={{
                            display: "flex",
                            justifyContent: { xs: "center", md: "flex-start" },
                            flexWrap: "wrap",
                            gap: "1rem",
                        }}
                    >
                        <Button
                            variant="call_to_action"
                            sx={{
                                backgroundColor: "#FFC107",
                                color: "#000",
                                padding: "0.8rem 2rem",
                                fontWeight: "bold",
                                "&:hover": { backgroundColor: "#e6a806" },
                            }}
                        >
                            Schedule An Appointment
                        </Button>
                        <Button variant="ghost_button">Learn More</Button>
                    </Box>
                    {/* Ratings */}
                    <Box
                        display="flex"
                        alignItems="center"
                        marginTop="2rem"
                        sx={{
                            justifyContent: { xs: "center", md: "flex-start" },
                        }}
                    >
                        {[campusConnex, "https://via.placeholder.com/40", "https://via.placeholder.com/40"].map(
                            (src, index) => (
                                <Box
                                    key={index}
                                    component="img"
                                    src={src}
                                    alt="user-profile"
                                    sx={{
                                        borderRadius: "50%",
                                        width: "40px",
                                        height: "40px",
                                        marginRight: index < 2 ? "-10px" : "0",
                                        border: "2px solid #fff",
                                    }}
                                />
                            )
                        )}
                        <Typography variant="body2" sx={{ marginLeft: "1rem", color: "#aaa" }}>
                            4.9 ⭐ Rating Reviews From <br />
                            <strong>12k+ People</strong>
                        </Typography>
                    </Box>
                </Box>
            </Grid>

            {/* Right Side - Commercial Video */}
            <Grid
                item
                xs={12}
                md={6}
                sx={{
                    display: "flex",
                    justifyContent: "center",
                    padding: 0,
                    marginTop: { xs: "2rem", md: 0 },
                }}
            >
                <video
                    src={commercial}
                    autoPlay
                    loop
                    muted
                    playsInline
                    style={{
                        minHeight: "360px",
                        width: "100%",
                        height: "auto",
                        borderRadius: "8px",
                    }}
                />
            </Grid>
        </Grid>
        </Box>
    );
}
import React from 'react';
import { Box, Container, Typography, Grid, Paper } from '@mui/material';
import { Code } from '@mui/icons-material';
import aboutUsImage from "../img/aboutUs.png"
import CustomLabel from "../../../components/CustomLabel"
const AboutUs = () => {
  return (
    <Box sx={{ color: 'white', padding: '4rem 0' }}>
      <Container maxWidth="lg">
        <Grid container spacing={4}>
          {/* Left Side: Image / Code Block */}
          <Grid item xs={12} md={6} >
            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>
              {/* You can place a visual of coding elements and icons similar to your design here */}
              <img src={aboutUsImage} alt="About Us" />

            </Box>
          </Grid>
          {/* Right Side: Code Elements / Visual */}


          <Grid item xs={12} md={6} >
            <CustomLabel label="About Us" />

            <Typography
              variant="h3"
              sx={{
                fontWeight: "bold",
                margin: "1rem 0",
                lineHeight: "1.2",
                fontSize: "clamp(1.5rem, 4vw, 2.5rem)",
                
              }}
            >
              Innovating
              <span style={{
                background: "linear-gradient(to top, #FF861D,#FBDF02, #FBDF02)", // Gradient background
                WebkitBackgroundClip: "text", // For Safari
                backgroundClip: "text", // Standard
                color: "transparent", // Make text color transparent to show gradient
              }}> Mobile App</span> Solutions for Your Success
            </Typography>
            <Typography variant="body1" sx={{ color: 'white' }}>
              At Aethur Tech, We're Dedicated to Delivering Innovative Mobile App Solutions that drive your success. Whether you're launching a new app or improving an existing one, Our Team works closely with You to Understand Your Vision and Business Goals. We leverage the Latest Technologies and Industry Best Practices to create Custom, Tailor-Made Apps that drive User Engagement and Provide a Seamless User Experience. Your Success is Our Priority, and We're Committed to Building Solutions that Help You Achieve It.
            </Typography>

          </Grid>
        </Grid>
      </Container>
    </Box>
  );
};

export default AboutUs;
import React, { useState } from 'react';
import { Box, Container, Typography, Grid, Paper, Button } from '@mui/material';
import CustomLabel from "../../../components/CustomLabel";
import penPhone from "../img/PenPhone.svg"
import codePhone from "../img/codePhone.svg"
import phone from "../img/phone.svg"
import laptop from "../img/laptop.svg"


const Services = () => {
  const texts = [
    "We build custom mobile apps for Android, iOS, and cross-platform.",
    "Advanced development in the areas of creating applications for local and remote systems using advanced technologies.",
    "Connecting the physical and digital worlds through seamless IoT solutions.",
    "Creating apps that work seamlessly across multiple platforms with one codebase."
  ];
  const imgs = [penPhone, codePhone, phone, laptop]

  return (
    <Box sx={{ color: 'white', padding: '0rem 0' }}>
      <Container maxWidth="lg">
        <Typography variant="h4" sx={{ textAlign: 'center', fontWeight: 'bold', color: '#ff9f00', marginBottom: '2rem' }}>
          <CustomLabel label="Unlock The Future" />
        </Typography>
        <Typography variant="h3" sx={{ textAlign: 'center', fontWeight: "bold", marginBottom: "20px" }}>
          Our <span style={{
            background: "linear-gradient(to top, #FF861D, #FBDF02)",
            WebkitBackgroundClip: "text",
            backgroundClip: "text",
            color: "transparent",
          }}> Services </span>
        </Typography>

        <Grid container spacing={4} justifyContent="center">
          {["Mobile App Design & Development", "Advanced Development", "IoT Development", "Cross-Platform Development"].map((title, index) => (
            <ServiceCard key={index} title={title} text={texts[index]} imgs={imgs[index]} />
          ))}
        </Grid>
      </Container>
    </Box>
  );
};

const ServiceCard = ({ title, text, imgs }) => {
  const [isHovered, setIsHovered] = useState(false);

  return (
    <Grid item xs={12} sm={6} md={3}>
      <Paper
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
        sx={{
          height: "100%", // Ensures all cards are equal height
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          padding: "10px",
          backgroundColor: "rgba(58, 58, 58, 0.17)",
          border: "1px solid rgba(255, 255, 255, 0.3)",
          borderRadius: "12px",
          transition: "all 0.5s ease-in-out",
          "&:hover": {
            cursor: "pointer",
            transform: "scale(1.05)",
            background: "linear-gradient(to top, #FF861D, #FBDF02)",
            boxShadow: "0px 6px 25px rgba(255, 255, 255, 0.15), 0px 0px 12px rgba(255, 190, 70, 0.5) inset",
          },
        }}
      >
        <Paper
          sx={{
            display: "flex",
            flexDirection: "column",
            justifyContent: "space-between",
            padding: "20px",
            borderRadius: "12px",
            textAlign: "center",
            height: "100%",
            position: "relative",
            boxShadow: "0px 4px 20px rgba(255, 255, 255, 0.1), 0px 0px 5px rgba(255, 255, 255, 0.2) inset",
            background: isHovered ? "linear-gradient(to top, #FF861D, #FBDF02)" : "rgba(46, 45, 43, 0.1)",
            transition: "all 0.5s ease-in-out",
            "&::before": {
              content: '""',
              position: "absolute",
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              borderRadius: "12px",
              padding: "1px",
              background: isHovered ? "rgba(29, 24, 8, 0.9)" : "linear-gradient(to top, rgba(254, 248, 181, 0.5), rgba(255, 248, 161, 0.4), rgba(228, 190, 76, 0.2))",
              "-webkit-mask": "linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)",
              "-webkit-mask-composite": "destination-out",
              maskComposite: "exclude",
            }
          }}
        >
          {/* Icon */}
          <Box
            sx={{
              width: "60px", // Adjust the size of the circle
              height: "60px",
              display: "flex",
              alignItems: "bottom",
              justifyContent: "center",
              borderRadius: "50%",
              background: isHovered ? "black" : "rgba(117, 117, 109, 0.5)", // Black background on hover
              transition: "all 0.5s ease-in-out",
            }}
          >

            <defs>
              <img
                src={imgs}
                alt="App Development Icon"
                style={{
                  width: "50px",
                  marginTop: "0.5rem",
                  filter: isHovered ? "invert(38%) sepia(100%) saturate(100%) hue-rotate(1deg) brightness(100%) contrast(105%)" : ""
                }}
              />
            </defs>
          </Box>
          <Typography variant="h6"
            sx={{
              color: isHovered ? "black" : "white",
              fontWeight: "bold",
              fontSize: "clamp(0.75rem, 1.5vw, 1.1rem)",
              marginBottom: "0.5rem",
            }}
          >
            {title}
          </Typography>

          {/* Description */}
          <Typography variant="body2" sx={{
            color: isHovered ? "black" : "white",
            flexGrow: 1
          }}>
            {text}
          </Typography>

          {/* Button with Smooth Transition */}
          <Button
            variant="call_to_action"
            sx={{
              transition: "all 0.5s ease-in-out",
              background: isHovered ? "rgb(255, 255, 255)" : "linear-gradient(to top, #FF861D, #FBDF02)",
              color: isHovered ? "#000" : "#000",
              boxShadow: isHovered
                ? "0 10px 15px rgba(0, 0, 0, 0.3)"
                : "0px 3px 8px rgba(255, 190, 70, 0.5)",
              transform: isHovered ? "scale(1.05)" : "scale(1)",
              "&:hover": {
                background: 'rgb(0, 0, 0)',
              }
            }}
          >
            Make An Appointment
          </Button>
        </Paper>
      </Paper>
    </Grid>
  );
};

export default Services;
import React from 'react';
import { Box, Container, Typography, Grid, Paper, Button } from '@mui/material';
import backgroundImage from "../img/projectBackground.png"; // Import background image
import Slider from "react-slick";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import project1 from "../img/project1.png"
import project2 from "../img/project2.png"
import project3 from "../img/project3.png"

const projects = [
  {
    title: "Web Development",
    description: "We provide comprehensive solutions for businesses, including web development, design, and digital strategy.",
    imgSrc: project1,
  },
  {
    title: "Mobile App Design",
    description: "We create user-friendly mobile applications, focusing on innovative designs and robust development.",
    imgSrc: project2,
  },
  {
    title: "Web3 Development",
    description: "We specialize in creating decentralized applications and blockchain technologies for the future of the web.",
    imgSrc: project3,
  },
];

// Carousel settings
const settings = {
  dots: false,
  infinite: true,
  speed: 500,
  slidesToShow: 3, // Show 3 projects at a time
  slidesToScroll: 1,
  autoplay: true,
  autoplaySpeed: 3000,
  arrows: true,
  responsive: [
    {
      breakpoint: 1024, // Medium screens
      settings: {
        slidesToShow: 2,
        slidesToScroll: 1,
      },
    },
    {
      breakpoint: 768, // Small screens
      settings: {
        slidesToShow: 1,
        slidesToScroll: 1,
      },
    },
  ],
};

const Projects = () => {
  return (
    <Box sx={{
      color: 'white', margin: '4rem 0',
      position: "relative",
      backgroundColor: "#0a0a0a",
      minHeight: "100%",
      paddingTop: "4rem",
      paddingBottom: "5px",
      backgroundImage: `linear-gradient(rgba(10,10,10,0.25), rgba(10,10,10,0.8)), url(${backgroundImage})`,
      backgroundSize: "cover",
      backgroundPosition: "center",
      backgroundRepeat: "no-repeat",
      "&::before": {
        content: '""',
        position: "absolute",
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        borderRadius: "150px",
        padding: "1px",
        background: "linear-gradient(to top, rgba(254, 248, 181, 0.5), rgba(255, 248, 161, 0.0), rgba(228, 190, 76, 0.0))",
        "-webkit-mask": "linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)",
        "-webkit-mask-composite": "destination-out",
        maskComposite: "exclude",
      }
    }}

    // sx={{
    //   display: "flex",
    //   flexDirection: "column",
    //   justifyContent: "space-between",
    //   padding: "20px",
    //   borderRadius: "12px",
    //   textAlign: "center",
    //   height: "100%",
    //   position: "relative",
    //   boxShadow: "0px 4px 20px rgba(255, 255, 255, 0.1), 0px 0px 5px rgba(255, 255, 255, 0.2) inset",
    //   background:  "rgba(46, 45, 43, 0.1)",
    //   transition: "all 0.5s ease-in-out",

    // }}

    >
      <Container maxWidth="lg">
        <Typography variant="h4" sx={{ textAlign: 'center', fontWeight: 'bold', color: '#fff', marginBottom: '2rem' }}>
          Our <span style={{
            background: "linear-gradient(to top, #FF861D, #FBDF02)",
            WebkitBackgroundClip: "text",
            backgroundClip: "text",
            color: "transparent",
          }}>Projects</span>
        </Typography>


        <Container maxWidth="lg" height="100%"

        >
          <Slider {...settings}>
            {projects.map((project, index) => (
              <ProjectCard project={project} key={index} />
            ))}
          </Slider>
        </Container>


        {/* View More Button */}
        <Box sx={{ textAlign: 'center', marginTop: '3rem' }}>
          <Button
            variant="outlined"
            sx={{
              position: "relative",
              color: "white",
              borderColor: "#ff9f00",
              borderRadius: "20px",
              overflow: "hidden",
              zIndex: 1, // Add zIndex to ensure text stays above background
              "&::before": {
                content: '""',
                position: "absolute",
                top: 0,
                left: 0,
                width: "100%",
                height: "100%",
                background: "linear-gradient(to top, #FF861D, #FBDF02)",
                opacity: 0,
                transition: "opacity 0.5s ease-in-out",
                zIndex: -1, // Place behind the text
              },
              "&:hover": {
                color: "black", // This wasn't working because the text was behind the gradient
                borderColor: "transparent",
                "&::before": {
                  opacity: 1,
                }
              }
            }}
          >
            View More
          </Button>

        </Box>
      </Container>
    </Box>
  );
};

const ProjectCard = ({ project, index }) => {
  return (
    <Box key={index} sx={{ padding: "0 15px", height: "100%" }}>
      <Paper
        sx={{
          display: "flex",
          flexDirection: "column",
          justifyContent: "space-between",
          padding: "20px",
          marginLeft: "20px",
          borderRadius: "12px",
          textAlign: "center",
          height: "100%", // Ensures uniform height
          position: "relative",
          boxShadow: "0px 4px 20px rgba(255, 255, 255, 0.1), 0px 0px 5px rgba(255, 255, 255, 0.2) inset",
          background: "rgba(46, 45, 43, 0.1)",
          transition: "all 0.5s ease-in-out",
          "&::before": {
            content: '""',
            position: "absolute",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            borderRadius: "12px",
            padding: "1px",
            background: "linear-gradient(to top, rgba(254, 248, 181, 0.5), rgba(255, 248, 161, 0.4), rgba(228, 190, 76, 0.2))",
            "-webkit-mask": "linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)",
            "-webkit-mask-composite": "destination-out",
            maskComposite: "exclude",
          }
        }}
      >
        {/* Project Image */}
        <img
          src={project.imgSrc}
          alt={project.title}
          style={{
            width: "100%",
            borderRadius: "8px",
            marginBottom: "1rem",
            objectFit: "cover", // Ensures the image fits well
            maxHeight: "180px", // Limits image height for consistency
          }} />

        {/* Title */}
        <Typography variant="h6" sx={{ color: "rgba(255, 255, 255, 0.8)", marginBottom: "0.5rem" }}>
          {project.title}
        </Typography>

        {/* Description */}
        <Typography variant="body2" sx={{ color: "rgba(167, 167, 167, 0.8)", marginBottom: "1rem" }}>
          {project.description}
        </Typography>

        {/* Call to Action Button */}
        <Typography
          variant="contained"
          sx={{
            color: "#E4BE4C",
            borderRadius: "20px",
            textTransform: "none",

            "&:hover": {
              backgroundColor: "#FFC107",
            },
            textDecoration: "underline"
          }}
        >
          Make an Appointment
        </Typography>
      </Paper>
    </Box>
  )
}

export default Projects;
import React from 'react';
import { Box, Container, Typography, Grid, Paper, Button, TextField } from '@mui/material';
import CustomLabel from "../../../components/CustomLabel";
import blog1 from "../img/blog1.png"
import blog2 from "../img/articles1.png"
import blog3 from "../img/articles2.png"
import blog4 from "../img/articles3.png"

const BlogSection = () => {
  return (
    <Box sx={{
      color: 'white', padding: '4rem 0', backgroundColor: 'rgba(255, 255, 255, 0.01)'

    }}>
      <Container maxWidth="lg">
        {/* Section Title */}
        <Typography
          variant="h4"
          sx={{ textAlign: 'center', fontWeight: 'bold', color: '#ff9f00' }}
        >
          <CustomLabel label={"Blog"} />
        </Typography>

        <Typography variant="h3" sx={{ textAlign: 'center', marginBottom: '2rem' }}>
          Discover Our Latest  <span style={{
            background: "linear-gradient(to top, #FF861D,#FF861D, rgb(255, 176, 29),#FBDF02, #FBDF02)", // Gradient background
            WebkitBackgroundClip: "text", // For Safari
            backgroundClip: "text", // Standard
            color: "transparent", // Make text color transparent to show gradient
          }}>Articles</span>
        </Typography>

        {/* Blog Articles Section */}
        <Grid container spacing={4} justifyContent="center"

        >
          {/* Featured Article */}
          <Grid item xs={12} md={6}
          >
            <Paper
              sx={{
                boxShadow: "0px 4px 20px rgba(255, 255, 255, 0.1), 0px 0px 5px rgba(255, 255, 255, 0.2) inset",
                border: "1px solid rgba(255, 255, 255, 0.3)",
                padding: '1.5rem',
                backgroundColor: 'rgba(235, 235, 235, 0.05)',
                borderRadius: '15px',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                textAlign: 'left',
                transition: 'transform 0.3s',
                '&:hover': {
                  transform: 'scale(1.03)',
                  backgroundColor: '#333',
                },
              }}
            >
              <img src={blog1} alt="Article 1" style={{ width: '100%', borderRadius: '10px' }} />
              <Typography variant="h7" sx={{ color: '#D0D0D0', marginTop: '1rem', textAlign: "start", width: "100%" }}>
                Aug 20, 2022
              </Typography>
              <Typography variant="h5" sx={{ color: 'white', marginTop: '1rem', fontWeight: 'bold' }}>
                A Comprehensive Guide to Navigating and Utilizing Advanced Platform Features
              </Typography>
              <Typography variant="body2" sx={{ color: 'rgba(155, 149, 149, 0.9)', marginBottom: '1rem' }}>
                This guide covers how to effectively navigate and make the most of our platform’s advanced features.
              </Typography>
              <Button variant="contained" color="warning" sx={{ borderRadius: '20px' }}>
                Read More
              </Button>
            </Paper>
          </Grid>

          {/* Side Articles */}
          <Grid item xs={12} md={6} container spacing={2}>
            {[{
              date: "Aug 10, 2022",
              title: "In-Depth Exploration: How to Effectively Manage and Interact with NFTs on Our Platform",
              image: blog2
            }, {
              date: "Aug 5, 2022",
              title: "Maximizing Your Potential: Strategies for Leveraging Interactive Tools and Features on Our Platform",
              image: blog3
            },
            {
              date: "Aug 5, 2022",
              title: "Unlocking the Full Power of Our Platform: Step-by-Step Instructions for Engaging with Key Features",
              image: blog4
            }
          ].map((article, index) => (
              <Grid item xs={12} key={index}>
                <Paper
                  sx={{
                    boxShadow: "0px 4px 20px rgba(255, 255, 255, 0.1), 0px 0px 5px rgba(255, 255, 255, 0.2) inset",
                    border: "1px solid rgba(255, 255, 255, 0.3)",
                    display: 'flex',
                    alignItems: 'center',
                    backgroundColor: 'rgba(235, 235, 235, 0.05)',
                    borderRadius: "12px",
                    padding: '1rem',
                    transition: 'transform 0.3s',
                    '&:hover': {
                      transform: 'scale(1.03)',
                      backgroundColor: '#333',
                    },
                  }}
                >
                  <img src={article.image} alt={article.title} style={{ width: '100px', borderRadius: '10px', marginRight: '1rem' }} />
                  <Box>
                    <Typography variant="body2" sx={{ color: '#D0D0D0' }}>
                      {article.date}
                    </Typography>
                    <Typography variant="h6" sx={{ color: 'white' }}>
                      {article.title}
                    </Typography>
                  </Box>
                </Paper>
              </Grid>
            ))}
          </Grid>
        </Grid>

        {/* Newsletter Subscription Section */}
        
      </Container>
    </Box>
  );
};

export default BlogSection;
import React from 'react';
import { Box, Container, Typography, Grid, Paper, Rating, Avatar } from '@mui/material';
import StarIcon from "@mui/icons-material/Star";

import CustomLabel from "../../../components/CustomLabel";
const Testimonials = () => {
  const texts = [
    "Made the trip from eastern oregon to purchase our cf moto 800 xc and had a great experience nice people and Gary was great and had everything ready to go to make our experience fast and easy would recommend this pla...",
    "I had injury issues with my 22 Points sport bike. The guys questioned me about my riding style and what could be transformed my bike suspension into a ride that performs flawlessly under every type and speed I drive.",
    "In the world of power sports, finding a solution to specific needs that really works is not always easy. But thanks to these guys, I’m now driving with absolute confidence.",

  ];
  const names = ["Kelly Runnels", "Jaydon Rosser", "Kevin Jeffery"]
  return (
    <Box sx={{ color: 'white', paddingTop: '4rem' }}>
      <Container maxWidth="lg">
        <Typography variant="h4" sx={{ textAlign: 'center', fontWeight: 'bold', color: '#ff9f00', marginBottom: '0rem' }}>
          <CustomLabel label="Testimonals" />
        </Typography>
        <Typography variant="h4" sx={{ textAlign: 'center', fontWeight: 'bold', color: '#ffffff', marginBottom: '2rem' }}>
          What Our
          <span style={{
            background: "linear-gradient(to top, #FF861D, #FBDF02)",
            WebkitBackgroundClip: "text",
            backgroundClip: "text",
            color: "transparent",
          }}> Client </span>
          Says
        </Typography>

        <Grid container spacing={4} justifyContent="center">
          {

            texts.map((text, index) => {
              return <ReviewCard text={text} name={names[index]} />
            })
          }
        </Grid>
      </Container>
    </Box>
  );
};

const ReviewCard = ({ text, name }) => {
  return (
    <Grid item xs={12} sm={6} md={4}>
      <Paper
        sx={{
          padding: "5px",
          backgroundColor: "#222",
          borderRadius: "12px",
          display: "flex",
          height: "100%",
          flexDirection: "column",
          justifyContent: "center",
          transition: "transform 0.3s, box-shadow 0.3s",
          "&:hover": {
            transform: "scale(1.03)",
            backgroundColor: "#333",
          },
        }}
      >
        {/* Review Content */}
        <Typography
          variant="body2"
          sx={{
            color: "rgba(255, 255, 255, 0.8)",
            fontSize: "0.9rem",
            lineHeight: "1.5",
            marginLeft: "0.55rem",
            marginBottom: "0.55rem",
          }}
        >
          {text}

          <Typography
            component="span"
            sx={{
              color: "#FFB300",
              fontWeight: "bold",
              cursor: "pointer",
              "&:hover": { textDecoration: "underline" },
            }}
          >
            Read More
          </Typography>
        </Typography>

        {/* User Profile Section */}
        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            marginTop: "1rem",
          }}
        >
          <Avatar
            src="/path-to-profile-image.jpg" // Replace with actual image path
            alt="Kelly Runnels"
            sx={{ width: 50, height: 50, marginRight: "0.75rem" }}
          />
          <Box>
            <Typography
              variant="h6"
              sx={{
                color: "white",
                fontWeight: "bold",
                fontSize: "1rem",
              }}
            >
              {name}
            </Typography>
            <Typography
              variant="body2"
              sx={{ color: "rgba(255, 255, 255, 0.7)", fontSize: "0.8rem" }}
            >
              Birmingham, AL
            </Typography>
            {/* Star Rating */}
            <Box sx={{ display: "flex", marginTop: "0.3rem" }}>
              {[...Array(5)].map((_, index) => (
                <StarIcon key={index} sx={{ color: "#FFA900", fontSize: "1rem", marginRight: "2px" }} />
              ))}
            </Box>
          </Box>
        </Box>
      </Paper>
    </Grid>
  );
};


export default Testimonials;
import { useEffect, useRef } from "react";
import HeroSection from "./sections/HeroSection";
import { AppBar, Toolbar, Typography, Box, Button, Grid, Container } from "@mui/material";
import Navbar from "../../components/Navbar";
import AboutUs from "./sections/AboutUs";
import Services from "./sections/OurServices";
import Testimonials from "./sections/Testimonials";
import Projects from "./sections/Projects";
import BlogSection from "./sections/Blogs";
import Newsletter from "./sections/Newsletter";

// Import the function that sets up the Three.js scene
import Canvas  from "./Canvas";

export default function Landing() {
    return (
      <Box
        sx={{
          position: "relative",
          minHeight: "100vh", // Changed to 100vh
          paddingBottom: "3rem",
          backgroundImage: `linear-gradient(rgba(10,10,10,0.25), rgba(10,10,10,0.8))`,
          backgroundSize: "cover",
          backgroundPosition: "center",
          backgroundRepeat: "no-repeat",
        }}
      >
        <Canvas />
        <Container maxWidth="lg" sx={{ zIndex: 3, position: "relative"}}>
          <Navbar />
          <HeroSection />
          <AboutUs />
          <Services />
          <Testimonials />
          <Projects />
          <BlogSection />
          < Newsletter/>
        </Container>
      </Box>
    );
  }import React from "react";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import remarkMath from "remark-math";
import rehypeKatex from "rehype-katex";
import 'katex/dist/katex.min.css';

export default function MarkdownRenderer({ content }) {
  return (
    <div style={{ color: "#ddd", fontSize: "1rem", lineHeight: "1.6" }}>
      <ReactMarkdown
        remarkPlugins={[remarkGfm, remarkMath]}
        rehypePlugins={[rehypeKatex]}
        components={{
          p: ({ node, ...props }) => (
            <p style={{ marginBottom: "1rem", color: "#ddd" }} {...props} />
          ),
          li: ({ node, ...props }) => (
            <li style={{ marginBottom: "0.5rem", color: "#ddd" }} {...props} />
          ),
          ul: ({ node, ...props }) => (
            <ul style={{ marginBottom: "1rem", paddingLeft: "1.5rem", color: "#ddd" }} {...props} />
          ),
          ol: ({ node, ...props }) => (
            <ol style={{ marginBottom: "1rem", paddingLeft: "1.5rem", color: "#ddd" }} {...props} />
          ),
          h1: ({ node, ...props }) => (
            <h1 style={{ color: "#FF861D", marginBottom: "1rem", fontSize: "2rem" }} {...props} />
          ),
          h2: ({ node, ...props }) => (
            <h2 style={{ color: "#FF861D", marginBottom: "0.8rem", fontSize: "1.5rem" }} {...props} />
          ),
          h3: ({ node, ...props }) => (
            <h3 style={{ color: "#FF861D", marginBottom: "0.6rem", fontSize: "1.25rem" }} {...props} />
          ),
          code: ({ node, inline, className, children, ...props }) => {
            // Don't style math code blocks
            if (className === 'language-math') {
              return <code className={className} {...props}>{children}</code>;
            }
            
            return (
              <code
                style={{
                  background: inline ? "#222" : "transparent",
                  color: "#FFFFFF",
                  padding: inline ? "2px 6px" : "0",
                  borderRadius: inline ? "4px" : "0",
                  fontSize: "0.95rem",
                  display: inline ? "inline" : "block",
                }}
                {...props}
              >
                {children}
              </code>
            );
          },
          pre: ({ node, ...props }) => (
            <pre
              style={{
                background: "#1a1a1a",
                padding: "1rem",
                borderRadius: "8px",
                overflow: "auto",
                marginBottom: "1rem",
                border: "1px solid #333",
              }}
              {...props}
            />
          ),
          blockquote: ({ node, ...props }) => (
            <blockquote
              style={{
                borderLeft: "4px solid #FF861D",
                paddingLeft: "1rem",
                margin: "1rem 0",
                fontStyle: "italic",
                color: "#bbb",
              }}
              {...props}
            />
          ),
          // Ensure math blocks have proper styling
          span: ({ node, className, ...props }) => {
            if (className?.includes('katex')) {
              return <span className={className} style={{ color: '#fff' }} {...props} />;
            }
            return <span {...props} />;
          },
          div: ({ node, className, ...props }) => {
            if (className?.includes('katex-display')) {
              return (
                <div
                  className={className}
                  style={{
                    textAlign: "center",
                    margin: "2rem 0",
                    padding: "1rem",
                    background: "#1a1a1a",
                    borderRadius: "8px",
                    border: "1px solid #333",
                    color: "#fff",
                  }}
                  {...props}
                />
              );
            }
            return <div className={className} {...props} />;
          },
        }}
      >
        {content}
      </ReactMarkdown>
    </div>
  );
}// src/components/SectionBlock.jsx
import React, { useEffect, useState } from "react";
import { Typography, Paper, Box } from "@mui/material";
import MarkdownRenderer from "./MarkdownRenderer";

const SectionBlock = ({ section }) => {
  const [markdownContent, setMarkdownContent] = useState("");

  useEffect(() => {
    if (section.markdown && section.markdownFile) {
      import(`./assets/markdown/${section.markdownFile}`)
        .then((res) => fetch(res.default).then((r) => r.text()))
        .then(setMarkdownContent)
        .catch(console.error);
    }
  }, [section]);
  

  return (
    <Paper
      sx={{
        padding: "2rem",
        borderRadius: "10px",
        marginBottom: "2rem",
        backgroundColor: "rgba(255, 255, 255, 0)",
      }}
    >
      <Typography
        variant="h5"
        sx={{ fontWeight: "bold", marginBottom: "1rem", color: "#FF861D" }}
      >
        {section.subtitle}
      </Typography>

      {section.markdown && section.markdownFile ? (
        <MarkdownRenderer content={markdownContent} />
      ) : section.subtitle === "Technical Details" &&
        Array.isArray(section.content) ? (
        <Box component="ul" sx={{ paddingLeft: "1.5rem", color: "#ddd" }}>
          {section.content.map((item, idx) => (
            <li key={idx} style={{ marginBottom: "1rem" }}>
              <strong>{item.label}</strong>
              <br />
              {item.text}
            </li>
          ))}
        </Box>
      ) : (
        <Typography
          variant="body1"
          sx={{ marginBottom: "1rem", color: "#ddd", whiteSpace: "pre-line" }}
        >
          {section.content}
        </Typography>
      )}

{section.video && (
  <video
    controls
    src={section.video}
    style={{
      maxHeight: "500px",
      width: "100%",
      borderRadius: "10px",
      marginTop: "1rem",
    }}
  />
)}

{section.image && (
  <Box
    component="img"
    src={section.image}
    alt="Section illustration"
    sx={{
      width: "100%",
      maxHeight: "500px",
      objectFit: "cover",
      borderRadius: "10px",
      marginTop: "1rem",
    }}
  />
)}

    </Paper>
  );
};

export default SectionBlock;
import React, { useState, useEffect } from "react";
import { Link, useLocation } from "react-router-dom";
import logo from "../images/Final Logo/rect1.png";
import asaLogo from "../images/Final Logo/ASA.png";
import {
  AppBar,
  Toolbar,
  Box,
  Button,
  Typography,
  IconButton,
  Drawer,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
} from "@mui/material";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faBars, faX } from "@fortawesome/free-solid-svg-icons";
import { useGoogleLogin } from "@react-oauth/google";

export default function Navbar() {
  const [openMenu, setOpenMenu] = useState(false);
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);
  const location = useLocation(); // Get current page path

  useEffect(() => {
    const handleResize = () => setIsMobile(window.innerWidth <= 768);
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  const toggleMenu = () => setOpenMenu((prevState) => !prevState);

  const loginWithGoogle = useGoogleLogin({
    onSuccess: async (tokenResponse) => {
      try {
        const res = await fetch(
          "https://www.googleapis.com/oauth2/v3/userinfo",
          {
            headers: {
              Authorization: `Bearer ${tokenResponse.access_token}`,
            },
          }
        );
        const data = await res.json();
        console.log(
          "User info:",
          data.email,
          data.given_name,
          data.family_name
        );

        await fetch("/api/send-email", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            name: `${data.given_name} ${data.family_name}`,
            email: data.email,
          }),
        });
      } catch (error) {
        console.error("Failed to fetch user info:", error);
      }
    },
    onError: () => {
      console.log("Login Failed");
    },
  });

  // Define links
  const links = [
    "Home",
    "About Me",
    //  "Blog", "Documentation",
    "Portfolio",
  ];
  const routes = { Home: "/", Portfolio: "/portfolio" };

  const ContactButton = ({ fullWidth = false, onClick = () => {} }) => (
    <Button
      variant="call_to_action"
      onClick={onClick}
      fullWidth={fullWidth}
      sx={{
        background: 'linear-gradient(to top, #FF861D, #FBDF02)',
        color: '#000',
        fontWeight: 'bold',
        textTransform: 'none',
        alignItems: 'center',
        fontSize: 'clamp(0.75rem, 1.5vw, 0.8rem)',
        padding: '0.7rem 1.5rem',
        borderRadius: '30px',
        border: 'none',
        margin: 0,
        transition: 'all 0.3s ease',
        '&:hover': {
          background: 'linear-gradient(to top, #F5C700, #D87814)',
          boxShadow: '0 10px 15px rgba(0, 0, 0, 0.3)',
          transform: 'scale(1.05)',
          color: '#fff',
        },
      }}
    >
      Contact Us
    </Button>
  );
  

  return (
    <AppBar
      position="sticky"
      sx={{
        backgroundColor: "#0a0a0a",
        color: "#fff",
        padding: "0",
        boxShadow: "none",
      }}
    >
      <Toolbar
        sx={{
          display: "flex",
          justifyContent: "space-between",
          borderRadius: "10px",
          border: "1px solid rgba(255, 255, 255, 0.33)",
          background:
            "linear-gradient(to right, rgba(255, 255, 255, 0.05), rgba(238, 237, 237, 0.05))",
          margin: "0px",
        }}
      >
        {/* Logo Section */}
        <Box sx={{ display: "flex", alignItems: "center" }}>
          <img
            src={location.pathname === "/portfolio" ? asaLogo : logo}
            alt="Logo"
            style={{ width: "clamp(100px, 15vw, 175px)", marginBottom: "5px" }}
          />
        </Box>

        {/* Navigation Links */}
        {!isMobile ? (
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-evenly",
              width: "60%",
            }}
          >
            {links.map((link) => {
              const isActive = location.pathname === routes[link];
              return routes[link] ? (
                // Valid navigation for Home & Portfolio
                <Link
                  key={link}
                  to={routes[link]}
                  style={{ textDecoration: "none", color: "inherit" }}
                >
                  <Typography
                    sx={{
                      cursor: "pointer",
                      fontWeight: "bold",
                      position: "relative",
                      backgroundImage: isActive
                        ? "linear-gradient(to top, #FF861D, #FBDF02)"
                        : "none",
                      backgroundClip: isActive ? "text" : "none",
                      WebkitBackgroundClip: isActive ? "text" : "none",
                      color: isActive ? "transparent" : "inherit",
                      transition: "color 0.3s ease, transform 0.3s ease",
                      fontSize: "clamp(0.75rem, 1.5vw, 1.15rem)",
                      "&:hover": {
                        color: "#FFC107",
                        transform: "translateY(-5px)",
                      },
                      "&::after": {
                        content: '""',
                        display: "block",
                        width: isActive ? "100%" : "0%",
                        height: "2px",
                        background:
                          "linear-gradient(to right, #FF861D, #FBDF02)",
                        transition: "width 0.3s ease",
                      },
                    }}
                  >
                    {link}
                  </Typography>
                </Link>
              ) : (
                // Display static links (No navigation)
                <Typography
                  key={link}
                  sx={{
                    cursor: "not-allowed",
                    fontWeight: "bold",
                    fontSize: "clamp(0.75rem, 1.5vw, 1.15rem)",
                    opacity: 0.5, // Dim inactive links
                  }}
                >
                  {link}
                </Typography>
              );
            })}
          </Box>
        ) : (
          <>
            {/* <Button variant="call_to_action" sx={{ marginRight: "60px" }}
            onClick={loginWithGoogle}
            >
              Contact Us
            </Button> */}

            {!isMobile && <ContactButton onClick={loginWithGoogle} />}

            <IconButton onClick={toggleMenu} sx={{ color: "#fff" }}>
              <FontAwesomeIcon icon={openMenu ? faX : faBars} />
            </IconButton>
          </>
        )}

        {!isMobile && <ContactButton onClick={loginWithGoogle} />}
      </Toolbar>

      {/* Mobile Drawer Menu */}
      <Drawer anchor="right" open={openMenu} onClose={toggleMenu}>
        <Box
          sx={{
            width: 250,
            backgroundColor: "#1a1a1a",
            color: "#fff",
            height: "100%",
            display: "flex",
            flexDirection: "column",
            padding: 2,
          }}
        >
          <Typography
            variant="h6"
            sx={{ marginBottom: 2, textAlign: "center", fontWeight: "bold" }}
          >
            Menu
          </Typography>
          <List>
            {links.map((link) => (
              <ListItem key={link} disablePadding>
                {routes[link] ? (
                  // Valid navigation for Home & Portfolio
                  <ListItemButton
                    component={Link}
                    to={routes[link]}
                    onClick={toggleMenu}
                  >
                    <ListItemText
                      primary={link}
                      sx={{
                        color:
                          location.pathname === routes[link]
                            ? "#FFC107"
                            : "#fff",
                        fontWeight:
                          location.pathname === routes[link]
                            ? "bold"
                            : "normal",
                      }}
                    />
                  </ListItemButton>
                ) : (
                  // Static text for other links
                  <ListItemText
                    primary={link}
                    sx={{
                      opacity: 0.5,
                      paddingLeft: "16px",
                      fontSize: "1rem",
                      color: "#999",
                    }}
                  />
                )}
              </ListItem>
            ))}
          </List>
          <Box sx={{marginTop: "auto", width: "100vw"}}>
          
          </Box>
          <ContactButton onClick={loginWithGoogle} />
          
        </Box>
      </Drawer>
    </AppBar>
  );
}
import {Typography} from "@mui/material";

export default function CustomLabel({label}){
    return (
        <Typography
            variant="overline"
            sx={{
                background: "linear-gradient(to top, #FF861D,rgb(255, 119, 0), #FBDF02, #FBDF02)",
                WebkitBackgroundClip: "text",
                borderRadius: "25px",
                border: "1px solid rgba(255, 255, 255, 1)",
                backgroundClip: "text", // Standard
                color: "transparent",
                padding: "0px 6px 0px 6px",
                margin: "0px",
                fontWeight: "bold",
                textTransform: "none",
                fontSize: "clamp(0.55rem, 1.45vw, 1.35rem)",
                display: "inline-block",
            }}
        >
            {label}
        </Typography>
    )
}import React from "react";
import { Box, Container, Grid, Typography, IconButton } from "@mui/material";
import {
  Facebook,
  Twitter,
  Instagram,
  LinkedIn,
  YouTube,
} from "@mui/icons-material";
import { Link as MUILink } from "@mui/material";
import { Link as RouterLink } from "react-router-dom";
import logo from "../images/Final Logo/rect1.png";
import backgroundImage from "../images/Footer.png";

const Footer = () => {
  return (
    <Box
      sx={{
        position: "relative",
        backgroundColor: "#0a0a0a",
        color: "#fff",
        padding: "3rem 0",
        backgroundImage: `url(${backgroundImage})`,
        backgroundSize: "cover",
        backgroundPosition: "center",
        backgroundRepeat: "no-repeat",
      }}
    >
      <Container maxWidth="lg">
        <Grid
          container
          spacing={4}
          justifyContent="space-between"
          alignItems="start"
        >
          {/* Left Section: Logo & Description */}
          <Grid item xs={12} md={4}>
            <Box>
              <img
                src={logo}
                alt="Aethur Tech Logo"
                style={{
                  width: "clamp(100px, 15vw, 175px)",
                  marginBottom: "10px",
                }}
              />
            </Box>
            <Typography
              variant="body2"
              sx={{ maxWidth: "280px", marginBottom: "1rem", color: "#ccc" }}
            >
              Aethur Tech designs and builds high-performance mobile apps and
              websites with elegant UI/UX and long-term support in mind. We turn
              your ideas into real, scalable, cross-platform experiences.
            </Typography>
            {/* Social Icons */}
            <Box display="flex" gap={1}>
              <IconButton sx={{ color: "#ff9f00", background: "white" }}>
                <Facebook />
              </IconButton>
              <IconButton sx={{ color: "#ff9f00", background: "white" }}>
                <Twitter />
              </IconButton>
              <IconButton sx={{ color: "#ff9f00", background: "white" }}>
                <Instagram />
              </IconButton>
              <IconButton sx={{ color: "#ff9f00", background: "white" }}>
                <LinkedIn />
              </IconButton>
              <IconButton sx={{ color: "#ff9f00", background: "white" }}>
                <YouTube />
              </IconButton>
            </Box>
          </Grid>

          {/* Right Section Columns: What We Do, Company, Contracts */}
          <Grid item xs={12} md={8}>
            <Grid container spacing={4}>
              {/* What We Do */}
              <Grid item xs={12} sm={4}>
                <Typography
                  variant="body1"
                  sx={{
                    fontWeight: "bold",
                    marginBottom: "1rem",
                    color: "#ff9f00",
                  }}
                >
                  What We Do
                </Typography>
                <Grid container direction="column" spacing={1}>
                  {[
                    "Mobile App Development",
                    "Website Development",
                    "UI/UX Design",
                    "Realtime Systems",
                    "Web3 Integrations",
                  ].map((item) => (
                    <Grid item key={item}>
                      <MUILink
                        href="#"
                        variant="body2"
                        sx={{ color: "#ccc", textDecoration: "none" }}
                      >
                        {item}
                      </MUILink>
                    </Grid>
                  ))}
                </Grid>
              </Grid>

              {/* Company */}
              <Grid item xs={12} sm={4}>
                <Typography
                  variant="body1"
                  sx={{
                    fontWeight: "bold",
                    marginBottom: "1rem",
                    color: "#ff9f00",
                  }}
                >
                  Company
                </Typography>
                <Grid container direction="column" spacing={1}>
                  {[
                    { name: "About", path: "/" },
                    { name: "Portfolio", path: "/portfolio" },
                    { name: "Contact", path: "/#contact" },
                  ].map((item) => (
                    <Grid item key={item.name}>
                      <MUILink
                        component={RouterLink}
                        to={item.path}
                        variant="body2"
                        sx={{ color: "#ccc", textDecoration: "none" }}
                      >
                        {item.name}
                      </MUILink>
                    </Grid>
                  ))}
                </Grid>
              </Grid>

              {/* Contracts */}
              <Grid item xs={12} sm={4}>
                <Typography
                  variant="body1"
                  sx={{
                    fontWeight: "bold",
                    marginBottom: "1rem",
                    color: "#ff9f00",
                  }}
                >
                  Contracts
                </Typography>
                <Grid container direction="column" spacing={1}>
                  {[
                    { name: "Service Agreement", path: "/docs/AETHUR_TECH_SERVICE_AGREEMENT.pdf" },
                    {
                      name: "Terms & Conditions",
                      path: "/docs/AETHUR_TECH_TERMS%20_AND_CONDITIONS.pdf"
                      ,
                    },
                    { name: "Privacy Policy", path: "/docs/PRIVACY_POLICY.pdf" },
                  ].map((item) => (
                    <Grid item key={item.name}>
                      <MUILink
                        href={item.path}
                        target="_blank"
                        rel="noopener noreferrer"
                        variant="body2"
                        sx={{ color: "#ccc", textDecoration: "none" }}
                      >
                        {item.name}
                      </MUILink>
                    </Grid>
                  ))}
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </Grid>

        {/* Bottom Section: Legal */}
        <Box sx={{ textAlign: "center", marginTop: "3rem" }}>
          <Typography variant="body2" sx={{ color: "#ccc" }}>
            &copy; 2024 Aethur Tech. All rights reserved.
          </Typography>
        </Box>
      </Container>
    </Box>
  );
};

export default Footer;
import React from "react";
import { ThemeProvider } from "@mui/material/styles";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { theme } from "./components/colorTheme";
import Footer from "./components/Footer";
import Landing from "./pages/landing/Landing";
import Portfolio from "./pages/project/Portfolio";
import ProjectCard from "./pages/project/sections/ProjectCard/ProjectCard";
import Docs from "./pages/Docs"; // or adjust based on your folder structure
// import sendEmail from "../api/send-email"


import "./App.css";

function App() {
  return (
    <ThemeProvider theme={theme}>
    <Router>
      <div className="App" style={{ background: "black" }}>
        <Routes>
          <Route path="/" element={<Landing />} />
          <Route path="/portfolio" element={<Portfolio />} />
          {/* <Route path="/api/send-email" element={<sendEmail />} /> */}
          <Route path="/docs/:id" element={<Docs />} />
          <Route path="/portfolio/projectCard/:id" element={<ProjectCard />} />
        </Routes>
        <Footer />
      </div>
    </Router>
    </ThemeProvider>
  );
}

export default App;
import article1 from "../pages/project/imgs/article1.png";
import article2 from "../pages/project/imgs/article2.png";
import article3 from "../pages/project/imgs/article3.png";

export const relatedArticles = [
  { title: "Advanced 3D Modeling Tips", img: article1 },
  { title: "The Future of AI in Animation", img: article2 },
  { title: "Mastering Unreal Engine 5", img: article3 },
];
import tamir from "../pages/project/imgs/TAMIR/tamirVideo.mp4";
import project2 from "../pages/project/imgs/project2.png";
import kukaVideo from "../pages/project/imgs/kuka_youbot/best.mp4"

export const projects = [
  {
    id: 1,
    year: "2024",
    client: "Project 01",
    title: "TAMIR",
    section: "ROS2",
    description: "Comprehensive Mobile App Design and Development",
    summary:
      "An intelligent pet-monitoring robot that leverages SLAM for autonomous navigation and correct undesirable pet behavior in real time.",
    media: tamir,
    type: "video",
  },
  {
    id: 2,
    year: "2024",
    client: "Project 04",
    title: "KUKA youBot",
    section: "Robotics & Control",
    description: "Mobile Manipulation with Feedback Control",
    summary:
      "Trajectory generation and feedback control for a mobile manipulator robot in CoppeliaSim using Python and Modern Robotics.",
    media: kukaVideo,
    type: "video",
  },
];
import tamirVideo from "../pages/project/imgs/TAMIR/tamirVideo.mp4";
import phoneView from "../pages/project/imgs/TAMIR/phoneView.mp4";
import teleop from "../pages/project/imgs/TAMIR/teleop.mp4";
import firstMap from "../pages/project/imgs/TAMIR/firstMap.webm";
import kukaVideo from "../pages/project/imgs/kuka_youbot/best.mp4"
import kukaPhoto from "../pages/project/imgs/kuka_youbot/kuka_youbot.jpg"
export const projectData = {
  1: {
    title: "TAMIR: The Training Assistive Mobile Intelligent Robot",
    date: "March 24, 2024",
    author: "John Doe",
    category: "Robotics & AI",
    introText:
      "Many pet owners face trouble with their furry friends getting into mischief—chewing furniture, barking excessively, or wandering into off-limits areas. TAMIR was designed to be an intelligent companion robot that detects, monitors, and corrects undesirable pet behaviors autonomously. Built with real-time navigation, geofencing, and corrective signal delivery, TAMIR represents a powerful integration of robotics and AI to make modern pet ownership safer and more manageable.",
    sections: [
      {
        subtitle: "Technical Details",
        content: [
          {
            label: "Precision Navigation",
            text: "The ROSbot 2R platform provides real-time SLAM capabilities using LiDAR and IMU sensors. This enables TAMIR to localize itself accurately within a dynamically changing household environment and navigate to precise locations for pet observation."
          },
          {
            label: "Edge AI Processing",
            text: "A Raspberry Pi 5 onboard computer runs the YOLOv8 object detection model, optimized via ONNX runtime. This ensures low-latency detection of pet behavior without requiring cloud inference or internet connectivity."
          },
          {
            label: "Smart Detection",
            text: "YOLOv8 enables robust detection of cats and dogs across varying lighting conditions and poses. Bounding boxes and class confidence scores are used to trigger behavior recognition logic in the ROS2 stack."
          },
          {
            label: "Geofencing",
            text: "AprilTags placed throughout the home serve as physical anchors that define safe and restricted zones. The robot continuously cross-references the detected pet's position with known geofenced areas to determine boundary violations."
          },
          {
            label: "Corrective Feedback",
            text: "A waterproof ultrasonic buzzer module is activated to deliver gentle auditory correction when the pet crosses into restricted zones. Signal parameters are calibrated to ensure humane and effective behavior correction."
          },
          {
            label: "Multi-Pet Coverage",
            text: "A secondary USB camera mounted on the rear of TAMIR ensures full 360° visual coverage, allowing the robot to handle multi-pet environments or fast-moving pets that may otherwise exit the primary field of view."
          }
        ],
        video: teleop
      },
      {
        subtitle: "Implementation",
        content:
          "TAMIR integrates real-time data from multiple sources—including LiDAR, RGB cameras, AprilTag detection, and onboard AI inference—to determine when a corrective action is needed. A ROS2 behavior tree node fuses all sensor data and manages the robot's response logic. The motion planner ensures safe traversal to target positions, while the behavior node decides when and where to trigger auditory corrections. The system uses an event-based architecture to minimize CPU load and preserve battery life.",
        video: firstMap
      },
      {
        subtitle: "Behavior Monitoring & Correction",
        content:
          "Using YOLO-based pet detection, TAMIR continuously analyzes live camera feeds to identify pets in the field of view. When a pet is detected within a restricted area, TAMIR logs the behavior and issues a corrective signal. The pet’s position is also tracked using AprilTag triangulation and updated to a central monitoring dashboard. These real-time updates help pet owners review patterns of unwanted behavior and tailor training protocols accordingly.",
        video: phoneView
      },
      {
        subtitle: "Results and Impact",
        content:
          "TAMIR has demonstrated strong results during trials across various home layouts. It achieved 95% accuracy in detecting boundary violations and delivered corrective feedback within an average of 2.1 seconds of detection. Pet owners reported significant improvements in pet compliance within one week of deployment. TAMIR's modular architecture also makes it suitable for integration with smart home systems, creating possibilities for more advanced home automation tied to pet behavior."
      }
    ],
    img: tamirVideo
  },
  
  2:{
    title: "KUKA youBot: Mobile Manipulation",
    date: "May 22, 2024",
    author: "Asa Rogers",
    category: "Robotics & Control",
    introText: "The KUKA youBot project demonstrates full pick-and-place functionality using a mobile manipulator simulated in CoppeliaSim. By combining an 8-segment SE(3) trajectory with real-time feedback control and odometry-based base tracking, the system performs smooth end-effector motion under joint and kinematic constraints. This project highlights the integration of trajectory planning, control theory, and simulation tools to achieve precise, hybrid mobile manipulation in a simulated environment."
,
    sections: [
      {
        subtitle: "Technical Details",
        content: [
          { label: "End-effector Task", text: "Pick at (1.25, 0), place at (0, -1.25)" },
          { label: "Joint Limits", text: "Joint 1: [-2.0, 2.0], Joints 2–4: [-1.5, 1.5], Joint 5: [-2.5, 2.5]" },
          { label: "Control Loop", text: "Feedforward + PI (Kp=1.0, Ki=0.5)" },
          { label: "Planner", text: "8-segment SE(3) trajectory using ScrewTrajectory()" },
          { label: "Execution", text: "Trajectory tracking with feedback_control() and Jacobian pseudo-inverse" },
          { label: "Validation", text: "Logged CSVs + CoppeliaSim visualization" },
        ],
        image: kukaPhoto,
      },
      {
        subtitle: "Implementation",
        markdown: true,
        markdownFile: "kuka_implementation.md"  // instead of inline content
      },
      {
        subtitle: "Results and Impact",
        content:
          "Demonstrated robust convergence under joint limits and kinematic constraints. Successfully executed pick-and-place under various error conditions.",
      },
    ],
    img: kukaVideo, // This will show in <HeroSection />
  }
};
import logo from "../images/Final Logo/standAloneLogo.jpg";

const name = "Aethur Tech";

export const otherProjects = [
  {
    id: 1,
    title: "Building your API stack",
    category: "Robotics",
    date: "18 Jan 2024",
    author: name,
    description: "The rise of RESTful APIs has been met by a rise in tools...",
    img: logo,
  },
  {
    id: 2,
    title: "Building your API stack",
    category: "Robotics",
    date: "18 Jan 2024",
    author: name,
    description:
      "The rise of RESTful APIs has been met by a rise in tools for creating, testing, and managing them.",
    img: logo,
  },
  {
    id: 3,
    title: "Building your API stack",
    category: "Robotics",
    date: "18 Jan 2024",
    author: name,
    description:
      "The rise of RESTful APIs has been met by a rise in tools for creating, testing, and managing them.",
    img: logo,
  },
];
import { Resend } from 'resend';

const resend = new Resend(process.env.RESEND_API_KEY);

export default async function handler(req, res) {
  console.log("✅ API hit");

  if (req.method !== 'POST') {
    console.log("❌ Wrong method:", req.method);
    return res.status(405).send('Method not allowed');
  }

  const { name, email } = req.body;
  console.log("📨 Incoming data:", name, email);
  console.log("🔐 API KEY present?", !!process.env.RESEND_API_KEY);

  try {
    const result = await resend.emails.send({
      from: 'onboarding@resend.dev',
      to: 'softwareace.j@gmail.com',
      subject: 'New Newsletter Signup',
      html: `<p><strong>Name:</strong> ${name}</p><p><strong>Email:</strong> ${email}</p>`,
    });

    console.log("✅ Email sent:", result);
    return res.status(200).json({ success: true, result });
  } catch (error) {
    console.error("❌ Email error:", error);
    return res.status(500).json({ error: error.message });
  }
}
// cuon-utils.js (c) 2012 kanda and matsuda
/**
 * Create a program object and make current
 * @param gl GL context
 * @param vshader a vertex shader program (string)
 * @param fshader a fragment shader program (string)
 * @return true, if the program object was created and successfully made current 
 */
function initShaders(gl, vshader, fshader) {
  var program = createProgram(gl, vshader, fshader);
  if (!program) {
    console.log('Failed to create program');
    return false;
  }

  gl.useProgram(program);
  gl.program = program;

  return true;
}

/**
 * Create the linked program object
 * @param gl GL context
 * @param vshader a vertex shader program (string)
 * @param fshader a fragment shader program (string)
 * @return created program object, or null if the creation has failed
 */
function createProgram(gl, vshader, fshader) {
  // Create shader object
  var vertexShader = loadShader(gl, gl.VERTEX_SHADER, vshader);
  var fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fshader);
  if (!vertexShader || !fragmentShader) {
    return null;
  }

  // Create a program object
  var program = gl.createProgram();
  if (!program) {
    return null;
  }

  // Attach the shader objects
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);

  // Link the program object
  gl.linkProgram(program);

  // Check the result of linking
  var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
  if (!linked) {
    var error = gl.getProgramInfoLog(program);
    console.log('Failed to link program: ' + error);
    gl.deleteProgram(program);
    gl.deleteShader(fragmentShader);
    gl.deleteShader(vertexShader);
    return null;
  }
  return program;
}

/**
 * Create a shader object
 * @param gl GL context
 * @param type the type of the shader object to be created
 * @param source shader program (string)
 * @return created shader object, or null if the creation has failed.
 */
function loadShader(gl, type, source) {
  // Create shader object
  var shader = gl.createShader(type);
  if (shader == null) {
    console.log('unable to create shader');
    return null;
  }

  // Set the shader program
  gl.shaderSource(shader, source);

  // Compile the shader
  gl.compileShader(shader);

  // Check the result of compilation
  var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
  if (!compiled) {
    var error = gl.getShaderInfoLog(shader);
    console.log('Failed to compile shader: ' + error);
    gl.deleteShader(shader);
    return null;
  }

  return shader;
}

/** 
 * Initialize and get the rendering for WebGL
 * @param canvas <cavnas> element
 * @param opt_debug flag to initialize the context for debugging
 * @return the rendering context for WebGL
 */
function getWebGLContext(canvas, opt_debug) {
  // Get the rendering context for WebGL
  var gl = WebGLUtils.setupWebGL(canvas);
  if (!gl) return null;

  // if opt_debug is explicitly false, create the context for debugging
  if (arguments.length < 2 || opt_debug) {
    gl = WebGLDebugUtils.makeDebugContext(gl);
  }

  return gl;
}
//Copyright (c) 2009 The Chromium Authors. All rights reserved.
//Use of this source code is governed by a BSD-style license that can be
//found in the LICENSE file.

// Various functions for helping debug WebGL apps.

WebGLDebugUtils = function() {

/**
 * Wrapped logging function.
 * @param {string} msg Message to log.
 */
var log = function(msg) {
  if (window.console && window.console.log) {
    window.console.log(msg);
  }
};

/**
 * Which arguements are enums.
 * @type {!Object.<number, string>}
 */
var glValidEnumContexts = {

  // Generic setters and getters

  'enable': { 0:true },
  'disable': { 0:true },
  'getParameter': { 0:true },

  // Rendering

  'drawArrays': { 0:true },
  'drawElements': { 0:true, 2:true },

  // Shaders

  'createShader': { 0:true },
  'getShaderParameter': { 1:true },
  'getProgramParameter': { 1:true },

  // Vertex attributes

  'getVertexAttrib': { 1:true },
  'vertexAttribPointer': { 2:true },

  // Textures

  'bindTexture': { 0:true },
  'activeTexture': { 0:true },
  'getTexParameter': { 0:true, 1:true },
  'texParameterf': { 0:true, 1:true },
  'texParameteri': { 0:true, 1:true, 2:true },
  'texImage2D': { 0:true, 2:true, 6:true, 7:true },
  'texSubImage2D': { 0:true, 6:true, 7:true },
  'copyTexImage2D': { 0:true, 2:true },
  'copyTexSubImage2D': { 0:true },
  'generateMipmap': { 0:true },

  // Buffer objects

  'bindBuffer': { 0:true },
  'bufferData': { 0:true, 2:true },
  'bufferSubData': { 0:true },
  'getBufferParameter': { 0:true, 1:true },

  // Renderbuffers and framebuffers

  'pixelStorei': { 0:true, 1:true },
  'readPixels': { 4:true, 5:true },
  'bindRenderbuffer': { 0:true },
  'bindFramebuffer': { 0:true },
  'checkFramebufferStatus': { 0:true },
  'framebufferRenderbuffer': { 0:true, 1:true, 2:true },
  'framebufferTexture2D': { 0:true, 1:true, 2:true },
  'getFramebufferAttachmentParameter': { 0:true, 1:true, 2:true },
  'getRenderbufferParameter': { 0:true, 1:true },
  'renderbufferStorage': { 0:true, 1:true },

  // Frame buffer operations (clear, blend, depth test, stencil)

  'clear': { 0:true },
  'depthFunc': { 0:true },
  'blendFunc': { 0:true, 1:true },
  'blendFuncSeparate': { 0:true, 1:true, 2:true, 3:true },
  'blendEquation': { 0:true },
  'blendEquationSeparate': { 0:true, 1:true },
  'stencilFunc': { 0:true },
  'stencilFuncSeparate': { 0:true, 1:true },
  'stencilMaskSeparate': { 0:true },
  'stencilOp': { 0:true, 1:true, 2:true },
  'stencilOpSeparate': { 0:true, 1:true, 2:true, 3:true },

  // Culling

  'cullFace': { 0:true },
  'frontFace': { 0:true },
};

/**
 * Map of numbers to names.
 * @type {Object}
 */
var glEnums = null;

/**
 * Initializes this module. Safe to call more than once.
 * @param {!WebGLRenderingContext} ctx A WebGL context. If
 *    you have more than one context it doesn't matter which one
 *    you pass in, it is only used to pull out constants.
 */
function init(ctx) {
  if (glEnums == null) {
    glEnums = { };
    for (var propertyName in ctx) {
      if (typeof ctx[propertyName] == 'number') {
        glEnums[ctx[propertyName]] = propertyName;
      }
    }
  }
}

/**
 * Checks the utils have been initialized.
 */
function checkInit() {
  if (glEnums == null) {
    throw 'WebGLDebugUtils.init(ctx) not called';
  }
}

/**
 * Returns true or false if value matches any WebGL enum
 * @param {*} value Value to check if it might be an enum.
 * @return {boolean} True if value matches one of the WebGL defined enums
 */
function mightBeEnum(value) {
  checkInit();
  return (glEnums[value] !== undefined);
}

/**
 * Gets an string version of an WebGL enum.
 *
 * Example:
 *   var str = WebGLDebugUtil.glEnumToString(ctx.getError());
 *
 * @param {number} value Value to return an enum for
 * @return {string} The string version of the enum.
 */
function glEnumToString(value) {
  checkInit();
  var name = glEnums[value];
  return (name !== undefined) ? name :
      ("*UNKNOWN WebGL ENUM (0x" + value.toString(16) + ")");
}

/**
 * Returns the string version of a WebGL argument.
 * Attempts to convert enum arguments to strings.
 * @param {string} functionName the name of the WebGL function.
 * @param {number} argumentIndx the index of the argument.
 * @param {*} value The value of the argument.
 * @return {string} The value as a string.
 */
function glFunctionArgToString(functionName, argumentIndex, value) {
  var funcInfo = glValidEnumContexts[functionName];
  if (funcInfo !== undefined) {
    if (funcInfo[argumentIndex]) {
      return glEnumToString(value);
    }
  }
  return value.toString();
}

/**
 * Given a WebGL context returns a wrapped context that calls
 * gl.getError after every command and calls a function if the
 * result is not gl.NO_ERROR.
 *
 * @param {!WebGLRenderingContext} ctx The webgl context to
 *        wrap.
 * @param {!function(err, funcName, args): void} opt_onErrorFunc
 *        The function to call when gl.getError returns an
 *        error. If not specified the default function calls
 *        console.log with a message.
 */
function makeDebugContext(ctx, opt_onErrorFunc) {
  init(ctx);
  opt_onErrorFunc = opt_onErrorFunc || function(err, functionName, args) {
        // apparently we can't do args.join(",");
        var argStr = "";
        for (var ii = 0; ii < args.length; ++ii) {
          argStr += ((ii == 0) ? '' : ', ') +
              glFunctionArgToString(functionName, ii, args[ii]);
        }
        log("WebGL error "+ glEnumToString(err) + " in "+ functionName +
            "(" + argStr + ")");
      };

  // Holds booleans for each GL error so after we get the error ourselves
  // we can still return it to the client app.
  var glErrorShadow = { };

  // Makes a function that calls a WebGL function and then calls getError.
  function makeErrorWrapper(ctx, functionName) {
    return function() {
      var result = ctx[functionName].apply(ctx, arguments);
      var err = ctx.getError();
      if (err != 0) {
        glErrorShadow[err] = true;
        opt_onErrorFunc(err, functionName, arguments);
      }
      return result;
    };
  }

  // Make a an object that has a copy of every property of the WebGL context
  // but wraps all functions.
  var wrapper = {};
  for (var propertyName in ctx) {
    if (typeof ctx[propertyName] == 'function') {
       wrapper[propertyName] = makeErrorWrapper(ctx, propertyName);
     } else {
       wrapper[propertyName] = ctx[propertyName];
     }
  }

  // Override the getError function with one that returns our saved results.
  wrapper.getError = function() {
    for (var err in glErrorShadow) {
      if (glErrorShadow[err]) {
        glErrorShadow[err] = false;
        return err;
      }
    }
    return ctx.NO_ERROR;
  };

  return wrapper;
}

function resetToInitialState(ctx) {
  var numAttribs = ctx.getParameter(ctx.MAX_VERTEX_ATTRIBS);
  var tmp = ctx.createBuffer();
  ctx.bindBuffer(ctx.ARRAY_BUFFER, tmp);
  for (var ii = 0; ii < numAttribs; ++ii) {
    ctx.disableVertexAttribArray(ii);
    ctx.vertexAttribPointer(ii, 4, ctx.FLOAT, false, 0, 0);
    ctx.vertexAttrib1f(ii, 0);
  }
  ctx.deleteBuffer(tmp);

  var numTextureUnits = ctx.getParameter(ctx.MAX_TEXTURE_IMAGE_UNITS);
  for (var ii = 0; ii < numTextureUnits; ++ii) {
    ctx.activeTexture(ctx.TEXTURE0 + ii);
    ctx.bindTexture(ctx.TEXTURE_CUBE_MAP, null);
    ctx.bindTexture(ctx.TEXTURE_2D, null);
  }

  ctx.activeTexture(ctx.TEXTURE0);
  ctx.useProgram(null);
  ctx.bindBuffer(ctx.ARRAY_BUFFER, null);
  ctx.bindBuffer(ctx.ELEMENT_ARRAY_BUFFER, null);
  ctx.bindFramebuffer(ctx.FRAMEBUFFER, null);
  ctx.bindRenderbuffer(ctx.RENDERBUFFER, null);
  ctx.disable(ctx.BLEND);
  ctx.disable(ctx.CULL_FACE);
  ctx.disable(ctx.DEPTH_TEST);
  ctx.disable(ctx.DITHER);
  ctx.disable(ctx.SCISSOR_TEST);
  ctx.blendColor(0, 0, 0, 0);
  ctx.blendEquation(ctx.FUNC_ADD);
  ctx.blendFunc(ctx.ONE, ctx.ZERO);
  ctx.clearColor(0, 0, 0, 0);
  ctx.clearDepth(1);
  ctx.clearStencil(-1);
  ctx.colorMask(true, true, true, true);
  ctx.cullFace(ctx.BACK);
  ctx.depthFunc(ctx.LESS);
  ctx.depthMask(true);
  ctx.depthRange(0, 1);
  ctx.frontFace(ctx.CCW);
  ctx.hint(ctx.GENERATE_MIPMAP_HINT, ctx.DONT_CARE);
  ctx.lineWidth(1);
  ctx.pixelStorei(ctx.PACK_ALIGNMENT, 4);
  ctx.pixelStorei(ctx.UNPACK_ALIGNMENT, 4);
  ctx.pixelStorei(ctx.UNPACK_FLIP_Y_WEBGL, false);
  ctx.pixelStorei(ctx.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
  // TODO: Delete this IF.
  if (ctx.UNPACK_COLORSPACE_CONVERSION_WEBGL) {
    ctx.pixelStorei(ctx.UNPACK_COLORSPACE_CONVERSION_WEBGL, ctx.BROWSER_DEFAULT_WEBGL);
  }
  ctx.polygonOffset(0, 0);
  ctx.sampleCoverage(1, false);
  ctx.scissor(0, 0, ctx.canvas.width, ctx.canvas.height);
  ctx.stencilFunc(ctx.ALWAYS, 0, 0xFFFFFFFF);
  ctx.stencilMask(0xFFFFFFFF);
  ctx.stencilOp(ctx.KEEP, ctx.KEEP, ctx.KEEP);
  ctx.viewport(0, 0, ctx.canvas.clientWidth, ctx.canvas.clientHeight);
  ctx.clear(ctx.COLOR_BUFFER_BIT | ctx.DEPTH_BUFFER_BIT | ctx.STENCIL_BUFFER_BIT);

  // TODO: This should NOT be needed but Firefox fails with 'hint'
  while(ctx.getError());
}

function makeLostContextSimulatingContext(ctx) {
  var wrapper_ = {};
  var contextId_ = 1;
  var contextLost_ = false;
  var resourceId_ = 0;
  var resourceDb_ = [];
  var onLost_ = undefined;
  var onRestored_ = undefined;
  var nextOnRestored_ = undefined;

  // Holds booleans for each GL error so can simulate errors.
  var glErrorShadow_ = { };

  function isWebGLObject(obj) {
    //return false;
    return (obj instanceof WebGLBuffer ||
            obj instanceof WebGLFramebuffer ||
            obj instanceof WebGLProgram ||
            obj instanceof WebGLRenderbuffer ||
            obj instanceof WebGLShader ||
            obj instanceof WebGLTexture);
  }

  function checkResources(args) {
    for (var ii = 0; ii < args.length; ++ii) {
      var arg = args[ii];
      if (isWebGLObject(arg)) {
        return arg.__webglDebugContextLostId__ == contextId_;
      }
    }
    return true;
  }

  function clearErrors() {
    var k = Object.keys(glErrorShadow_);
    for (var ii = 0; ii < k.length; ++ii) {
      delete glErrorShdow_[k];
    }
  }

  // Makes a function that simulates WebGL when out of context.
  function makeLostContextWrapper(ctx, functionName) {
    var f = ctx[functionName];
    return function() {
      // Only call the functions if the context is not lost.
      if (!contextLost_) {
        if (!checkResources(arguments)) {
          glErrorShadow_[ctx.INVALID_OPERATION] = true;
          return;
        }
        var result = f.apply(ctx, arguments);
        return result;
      }
    };
  }

  for (var propertyName in ctx) {
    if (typeof ctx[propertyName] == 'function') {
       wrapper_[propertyName] = makeLostContextWrapper(ctx, propertyName);
     } else {
       wrapper_[propertyName] = ctx[propertyName];
     }
  }

  function makeWebGLContextEvent(statusMessage) {
    return {statusMessage: statusMessage};
  }

  function freeResources() {
    for (var ii = 0; ii < resourceDb_.length; ++ii) {
      var resource = resourceDb_[ii];
      if (resource instanceof WebGLBuffer) {
        ctx.deleteBuffer(resource);
      } else if (resource instanceof WebctxFramebuffer) {
        ctx.deleteFramebuffer(resource);
      } else if (resource instanceof WebctxProgram) {
        ctx.deleteProgram(resource);
      } else if (resource instanceof WebctxRenderbuffer) {
        ctx.deleteRenderbuffer(resource);
      } else if (resource instanceof WebctxShader) {
        ctx.deleteShader(resource);
      } else if (resource instanceof WebctxTexture) {
        ctx.deleteTexture(resource);
      }
    }
  }

  wrapper_.loseContext = function() {
    if (!contextLost_) {
      contextLost_ = true;
      ++contextId_;
      while (ctx.getError());
      clearErrors();
      glErrorShadow_[ctx.CONTEXT_LOST_WEBGL] = true;
      setTimeout(function() {
          if (onLost_) {
            onLost_(makeWebGLContextEvent("context lost"));
          }
        }, 0);
    }
  };

  wrapper_.restoreContext = function() {
    if (contextLost_) {
      if (onRestored_) {
        setTimeout(function() {
            freeResources();
            resetToInitialState(ctx);
            contextLost_ = false;
            if (onRestored_) {
              var callback = onRestored_;
              onRestored_ = nextOnRestored_;
              nextOnRestored_ = undefined;
              callback(makeWebGLContextEvent("context restored"));
            }
          }, 0);
      } else {
        throw "You can not restore the context without a listener"
      }
    }
  };

  // Wrap a few functions specially.
  wrapper_.getError = function() {
    if (!contextLost_) {
      var err;
      while (err = ctx.getError()) {
        glErrorShadow_[err] = true;
      }
    }
    for (var err in glErrorShadow_) {
      if (glErrorShadow_[err]) {
        delete glErrorShadow_[err];
        return err;
      }
    }
    return ctx.NO_ERROR;
  };

  var creationFunctions = [
    "createBuffer",
    "createFramebuffer",
    "createProgram",
    "createRenderbuffer",
    "createShader",
    "createTexture"
  ];
  for (var ii = 0; ii < creationFunctions.length; ++ii) {
    var functionName = creationFunctions[ii];
    wrapper_[functionName] = function(f) {
      return function() {
        if (contextLost_) {
          return null;
        }
        var obj = f.apply(ctx, arguments);
        obj.__webglDebugContextLostId__ = contextId_;
        resourceDb_.push(obj);
        return obj;
      };
    }(ctx[functionName]);
  }

  var functionsThatShouldReturnNull = [
    "getActiveAttrib",
    "getActiveUniform",
    "getBufferParameter",
    "getContextAttributes",
    "getAttachedShaders",
    "getFramebufferAttachmentParameter",
    "getParameter",
    "getProgramParameter",
    "getProgramInfoLog",
    "getRenderbufferParameter",
    "getShaderParameter",
    "getShaderInfoLog",
    "getShaderSource",
    "getTexParameter",
    "getUniform",
    "getUniformLocation",
    "getVertexAttrib"
  ];
  for (var ii = 0; ii < functionsThatShouldReturnNull.length; ++ii) {
    var functionName = functionsThatShouldReturnNull[ii];
    wrapper_[functionName] = function(f) {
      return function() {
        if (contextLost_) {
          return null;
        }
        return f.apply(ctx, arguments);
      }
    }(wrapper_[functionName]);
  }

  var isFunctions = [
    "isBuffer",
    "isEnabled",
    "isFramebuffer",
    "isProgram",
    "isRenderbuffer",
    "isShader",
    "isTexture"
  ];
  for (var ii = 0; ii < isFunctions.length; ++ii) {
    var functionName = isFunctions[ii];
    wrapper_[functionName] = function(f) {
      return function() {
        if (contextLost_) {
          return false;
        }
        return f.apply(ctx, arguments);
      }
    }(wrapper_[functionName]);
  }

  wrapper_.checkFramebufferStatus = function(f) {
    return function() {
      if (contextLost_) {
        return ctx.FRAMEBUFFER_UNSUPPORTED;
      }
      return f.apply(ctx, arguments);
    };
  }(wrapper_.checkFramebufferStatus);

  wrapper_.getAttribLocation = function(f) {
    return function() {
      if (contextLost_) {
        return -1;
      }
      return f.apply(ctx, arguments);
    };
  }(wrapper_.getAttribLocation);

  wrapper_.getVertexAttribOffset = function(f) {
    return function() {
      if (contextLost_) {
        return 0;
      }
      return f.apply(ctx, arguments);
    };
  }(wrapper_.getVertexAttribOffset);

  wrapper_.isContextLost = function() {
    return contextLost_;
  };

  function wrapEvent(listener) {
    if (typeof(listener) == "function") {
      return listener;
    } else {
      return function(info) {
        listener.handleEvent(info);
      }
    }
  }

  wrapper_.registerOnContextLostListener = function(listener) {
    onLost_ = wrapEvent(listener);
  };

  wrapper_.registerOnContextRestoredListener = function(listener) {
    if (contextLost_) {
      nextOnRestored_ = wrapEvent(listener);
    } else {
      onRestored_ = wrapEvent(listener);
    }
  }

  return wrapper_;
}

return {
  /**
   * Initializes this module. Safe to call more than once.
   * @param {!WebGLRenderingContext} ctx A WebGL context. If
   *    you have more than one context it doesn't matter which one
   *    you pass in, it is only used to pull out constants.
   */
  'init': init,

  /**
   * Returns true or false if value matches any WebGL enum
   * @param {*} value Value to check if it might be an enum.
   * @return {boolean} True if value matches one of the WebGL defined enums
   */
  'mightBeEnum': mightBeEnum,

  /**
   * Gets an string version of an WebGL enum.
   *
   * Example:
   *   WebGLDebugUtil.init(ctx);
   *   var str = WebGLDebugUtil.glEnumToString(ctx.getError());
   *
   * @param {number} value Value to return an enum for
   * @return {string} The string version of the enum.
   */
  'glEnumToString': glEnumToString,

  /**
   * Converts the argument of a WebGL function to a string.
   * Attempts to convert enum arguments to strings.
   *
   * Example:
   *   WebGLDebugUtil.init(ctx);
   *   var str = WebGLDebugUtil.glFunctionArgToString('bindTexture', 0, gl.TEXTURE_2D);
   *
   * would return 'TEXTURE_2D'
   *
   * @param {string} functionName the name of the WebGL function.
   * @param {number} argumentIndx the index of the argument.
   * @param {*} value The value of the argument.
   * @return {string} The value as a string.
   */
  'glFunctionArgToString': glFunctionArgToString,

  /**
   * Given a WebGL context returns a wrapped context that calls
   * gl.getError after every command and calls a function if the
   * result is not NO_ERROR.
   *
   * You can supply your own function if you want. For example, if you'd like
   * an exception thrown on any GL error you could do this
   *
   *    function throwOnGLError(err, funcName, args) {
   *      throw WebGLDebugUtils.glEnumToString(err) + " was caused by call to" +
   *            funcName;
   *    };
   *
   *    ctx = WebGLDebugUtils.makeDebugContext(
   *        canvas.getContext("webgl"), throwOnGLError);
   *
   * @param {!WebGLRenderingContext} ctx The webgl context to wrap.
   * @param {!function(err, funcName, args): void} opt_onErrorFunc The function
   *     to call when gl.getError returns an error. If not specified the default
   *     function calls console.log with a message.
   */
  'makeDebugContext': makeDebugContext,

  /**
   * Given a WebGL context returns a wrapped context that adds 4
   * functions.
   *
   * ctx.loseContext:
   *   simulates a lost context event.
   *
   * ctx.restoreContext:
   *   simulates the context being restored.
   *
   * ctx.registerOnContextLostListener(listener):
   *   lets you register a listener for context lost. Use instead
   *   of addEventListener('webglcontextlostevent', listener);
   *
   * ctx.registerOnContextRestoredListener(listener):
   *   lets you register a listener for context restored. Use
   *   instead of addEventListener('webglcontextrestored',
   *   listener);
   *
   * @param {!WebGLRenderingContext} ctx The webgl context to wrap.
   */
  'makeLostContextSimulatingContext': makeLostContextSimulatingContext,

  /**
   * Resets a context to the initial state.
   * @param {!WebGLRenderingContext} ctx The webgl context to
   *     reset.
   */
  'resetToInitialState': resetToInitialState
};

}();

/*
 * Copyright 2010, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimez
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


/**
 * @fileoverview This file contains functions every webgl program will need
 * a version of one way or another.
 *
 * Instead of setting up a context manually it is recommended to
 * use. This will check for success or failure. On failure it
 * will attempt to present an approriate message to the user.
 *
 *       gl = WebGLUtils.setupWebGL(canvas);
 *
 * For animated WebGL apps use of setTimeout or setInterval are
 * discouraged. It is recommended you structure your rendering
 * loop like this.
 *
 *       function render() {
 *         window.requestAnimationFrame(render, canvas);
 *
 *         // do rendering
 *         ...
 *       }
 *       render();
 *
 * This will call your rendering function up to the refresh rate
 * of your display but will stop rendering if your app is not
 * visible.
 */

WebGLUtils = function() {

/**
 * Creates the HTLM for a failure message
 * @param {string} canvasContainerId id of container of th
 *        canvas.
 * @return {string} The html.
 */
var makeFailHTML = function(msg) {
  return '' +
        '<div style="margin: auto; width:500px;z-index:10000;margin-top:20em;text-align:center;">' + msg + '</div>';
  return '' +
    '<table style="background-color: #8CE; width: 100%; height: 100%;"><tr>' +
    '<td align="center">' +
    '<div style="display: table-cell; vertical-align: middle;">' +
    '<div style="">' + msg + '</div>' +
    '</div>' +
    '</td></tr></table>';
};

/**
 * Mesasge for getting a webgl browser
 * @type {string}
 */
var GET_A_WEBGL_BROWSER = '' +
  'This page requires a browser that supports WebGL.<br/>' +
  '<a href="http://get.webgl.org">Click here to upgrade your browser.</a>';

/**
 * Mesasge for need better hardware
 * @type {string}
 */
var OTHER_PROBLEM = '' +
  "It doesn't appear your computer can support WebGL.<br/>" +
  '<a href="http://get.webgl.org">Click here for more information.</a>';

/**
 * Creates a webgl context. If creation fails it will
 * change the contents of the container of the <canvas>
 * tag to an error message with the correct links for WebGL.
 * @param {Element} canvas. The canvas element to create a
 *     context from.
 * @param {WebGLContextCreationAttirbutes} opt_attribs Any
 *     creation attributes you want to pass in.
 * @param {function:(msg)} opt_onError An function to call
 *     if there is an error during creation.
 * @return {WebGLRenderingContext} The created context.
 */
var setupWebGL = function(canvas, opt_attribs, opt_onError) {
  function handleCreationError(msg) {
      var container = document.getElementsByTagName("body")[0];
    //var container = canvas.parentNode;
    if (container) {
      var str = window.WebGLRenderingContext ?
           OTHER_PROBLEM :
           GET_A_WEBGL_BROWSER;
      if (msg) {
        str += "<br/><br/>Status: " + msg;
      }
      container.innerHTML = makeFailHTML(str);
    }
  };

  opt_onError = opt_onError || handleCreationError;

  if (canvas.addEventListener) {
    canvas.addEventListener("webglcontextcreationerror", function(event) {
          opt_onError(event.statusMessage);
        }, false);
  }
  var context = create3DContext(canvas, opt_attribs);
  if (!context) {
    if (!window.WebGLRenderingContext) {
      opt_onError("");
    } else {
      opt_onError("");
    }
  }

  return context;
};

/**
 * Creates a webgl context.
 * @param {!Canvas} canvas The canvas tag to get context
 *     from. If one is not passed in one will be created.
 * @return {!WebGLContext} The created context.
 */
var create3DContext = function(canvas, opt_attribs) {
  var names = ["webgl", "experimental-webgl", "webkit-3d", "moz-webgl"];
  var context = null;
  for (var ii = 0; ii < names.length; ++ii) {
    try {
      context = canvas.getContext(names[ii], opt_attribs);
    } catch(e) {}
    if (context) {
      break;
    }
  }
  return context;
}

return {
  create3DContext: create3DContext,
  setupWebGL: setupWebGL
};
}();

/**
 * Provides requestAnimationFrame in a cross browser
 * way.
 */
if (!window.requestAnimationFrame) {
  window.requestAnimationFrame = (function() {
    return window.requestAnimationFrame ||
           window.webkitRequestAnimationFrame ||
           window.mozRequestAnimationFrame ||
           window.oRequestAnimationFrame ||
           window.msRequestAnimationFrame ||
           function(/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {
             window.setTimeout(callback, 1000/60);
           };
  })();
}

/** * ERRATA: 'cancelRequestAnimationFrame' renamed to 'cancelAnimationFrame' to reflect an update to the W3C Animation-Timing Spec. 
 * 
 * Cancels an animation frame request. 
 * Checks for cross-browser support, falls back to clearTimeout. 
 * @param {number}  Animation frame request. */
if (!window.cancelAnimationFrame) {
  window.cancelAnimationFrame = (window.cancelRequestAnimationFrame ||
                                 window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame ||
                                 window.mozCancelAnimationFrame || window.mozCancelRequestAnimationFrame ||
                                 window.msCancelAnimationFrame || window.msCancelRequestAnimationFrame ||
                                 window.oCancelAnimationFrame || window.oCancelRequestAnimationFrame ||
                                 window.clearTimeout);
}// cuon-matrix.js (c) 2012 kanda and matsuda
/** 
 * This is a class treating 4x4 matrix from the book 
 *	'WebGL Programming Guide' (2013),
 * MODIFIED 2/2014,8 by Jack Tumblin and students in Northwestern Univ EECS 351-1
 * "Intro to Computer Grapics'.
 * --added 'pushMatrix()' and 'popMatrix()' member fcns to provide a push-down/
 *    pop-up stack for any Matrix4 object, useful for traversing scene graphs.
 * --added Quaternion class (at end; modified from early THREE.js library)
 * --added 'printMe' member functions to print vector, matrix, and quaternions
 *	     in JavaScript console using 'console.log()' function
 *
 * --This library's 'setXXX()' functions replace current matrix contents;
 *  (e.g. setIdentity(), setRotate(), etc) and its 'concat()' and 'XXX()' fcns
 *  (e.g. rotate(), translate(), scale() etc) multiply current matrix contents 
 * with a with the function's newly-created matrix, e.g.:
 *  					[M_new] = [M_old][M_rotate] 
 * and returns matrix M_new.
 */

/**
 * Constructor of Matrix4
 * If opt_src is specified, new matrix is initialized by opt_src.
 * Otherwise, new matrix is initialized by identity matrix.
 * @param opt_src source matrix(option)
 */
var Matrix4 = function(opt_src) {
  var i, s, d;
  if (opt_src && typeof opt_src === 'object' && opt_src.hasOwnProperty('elements')) {
    s = opt_src.elements;
    d = new Float32Array(16);
    for (i = 0; i < 16; ++i) {
      d[i] = s[i];
    }
    this.elements = d;
  } else {
    this.elements = new Float32Array([1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1]);
  }
};
 
/**
 * Set the identity matrix.
 * @return this
 */
Matrix4.prototype.setIdentity = function() {
  var e = this.elements;
  e[0] = 1;   e[4] = 0;   e[8]  = 0;   e[12] = 0;
  e[1] = 0;   e[5] = 1;   e[9]  = 0;   e[13] = 0;
  e[2] = 0;   e[6] = 0;   e[10] = 1;   e[14] = 0;
  e[3] = 0;   e[7] = 0;   e[11] = 0;   e[15] = 1;
  return this;
};

/**
 * Copy matrix.
 * @param src source matrix
 * @return this
 */
Matrix4.prototype.set = function(src) {
  var i, s, d;

  s = src.elements;
  d = this.elements;

  if (s === d) {		// do nothing if given 'this' as arg.
    return;
  }
    
  for (i = 0; i < 16; ++i) {	
    d[i] = s[i];
  }
  return this;
};

/**
 * Multiply the matrix from the right.
 * @param other The multiply matrix
 * @return this
 */
Matrix4.prototype.concat = function(other) {
  var i, e, a, b, ai0, ai1, ai2, ai3;
  
  // Calculate e = a * b
  e = this.elements;
  a = this.elements;
  b = other.elements;
  
  // If e equals b, copy b to temporary matrix.
  if (e === b) {
    b = new Float32Array(16);
    for (i = 0; i < 16; ++i) {
      b[i] = e[i];
    }
  }
  
  for (i = 0; i < 4; i++) {
    ai0=a[i];  ai1=a[i+4];  ai2=a[i+8];  ai3=a[i+12];
    e[i]    = ai0 * b[0]  + ai1 * b[1]  + ai2 * b[2]  + ai3 * b[3];
    e[i+4]  = ai0 * b[4]  + ai1 * b[5]  + ai2 * b[6]  + ai3 * b[7];
    e[i+8]  = ai0 * b[8]  + ai1 * b[9]  + ai2 * b[10] + ai3 * b[11];
    e[i+12] = ai0 * b[12] + ai1 * b[13] + ai2 * b[14] + ai3 * b[15];
  }
  
  return this;
};

Matrix4.prototype.multiply = Matrix4.prototype.concat;

/**
 * Multiply the three-dimensional vector (presumes w==1)
 * @param pos  The multiply vector
 * @return The result of multiplication(Float32Array)
 */
Matrix4.prototype.multiplyVector3 = function(pos) {
  var e = this.elements;
  var p = pos.elements;
  var v = new Vector3();
  var result = v.elements;

  result[0] = p[0] * e[0] + p[1] * e[4] + p[2] * e[ 8] + e[11]; // note the added 4th column
  result[1] = p[0] * e[1] + p[1] * e[5] + p[2] * e[ 9] + e[12]; // (presumes hidden 4th vector element w==1)
  result[2] = p[0] * e[2] + p[1] * e[6] + p[2] * e[10] + e[13];

  return v;
};

/**
 * Multiply the four-dimensional vector.
 * @param pos  The multiply vector
 * @return The result of multiplication(Float32Array)
 */
Matrix4.prototype.multiplyVector4 = function(pos) {
  var e = this.elements;
  var p = pos.elements;
  var v = new Vector4();
  var result = v.elements;

  result[0] = p[0] * e[0] + p[1] * e[4] + p[2] * e[ 8] + p[3] * e[12];
  result[1] = p[0] * e[1] + p[1] * e[5] + p[2] * e[ 9] + p[3] * e[13];
  result[2] = p[0] * e[2] + p[1] * e[6] + p[2] * e[10] + p[3] * e[14];
  result[3] = p[0] * e[3] + p[1] * e[7] + p[2] * e[11] + p[3] * e[15];

  return v;
};

/**
 * Transpose the matrix.
 * @return this
 */
Matrix4.prototype.transpose = function() {
  var e, t;

  e = this.elements;

  t = e[ 1];  e[ 1] = e[ 4];  e[ 4] = t;
  t = e[ 2];  e[ 2] = e[ 8];  e[ 8] = t;
  t = e[ 3];  e[ 3] = e[12];  e[12] = t;
  t = e[ 6];  e[ 6] = e[ 9];  e[ 9] = t;
  t = e[ 7];  e[ 7] = e[13];  e[13] = t;
  t = e[11];  e[11] = e[14];  e[14] = t;

  return this;
};

/**
 * Calculate the inverse matrix of specified matrix, and set to this.
 * @param other The source matrix
 * @return this
 */
Matrix4.prototype.setInverseOf = function(other) {
  var i, s, d, inv, det;

  s = other.elements;
  d = this.elements;
  inv = new Float32Array(16);

  inv[0]  =   s[5]*s[10]*s[15] - s[5] *s[11]*s[14] - s[9] *s[6]*s[15]
            + s[9]*s[7] *s[14] + s[13]*s[6] *s[11] - s[13]*s[7]*s[10];
  inv[4]  = - s[4]*s[10]*s[15] + s[4] *s[11]*s[14] + s[8] *s[6]*s[15]
            - s[8]*s[7] *s[14] - s[12]*s[6] *s[11] + s[12]*s[7]*s[10];
  inv[8]  =   s[4]*s[9] *s[15] - s[4] *s[11]*s[13] - s[8] *s[5]*s[15]
            + s[8]*s[7] *s[13] + s[12]*s[5] *s[11] - s[12]*s[7]*s[9];
  inv[12] = - s[4]*s[9] *s[14] + s[4] *s[10]*s[13] + s[8] *s[5]*s[14]
            - s[8]*s[6] *s[13] - s[12]*s[5] *s[10] + s[12]*s[6]*s[9];

  inv[1]  = - s[1]*s[10]*s[15] + s[1] *s[11]*s[14] + s[9] *s[2]*s[15]
            - s[9]*s[3] *s[14] - s[13]*s[2] *s[11] + s[13]*s[3]*s[10];
  inv[5]  =   s[0]*s[10]*s[15] - s[0] *s[11]*s[14] - s[8] *s[2]*s[15]
            + s[8]*s[3] *s[14] + s[12]*s[2] *s[11] - s[12]*s[3]*s[10];
  inv[9]  = - s[0]*s[9] *s[15] + s[0] *s[11]*s[13] + s[8] *s[1]*s[15]
            - s[8]*s[3] *s[13] - s[12]*s[1] *s[11] + s[12]*s[3]*s[9];
  inv[13] =   s[0]*s[9] *s[14] - s[0] *s[10]*s[13] - s[8] *s[1]*s[14]
            + s[8]*s[2] *s[13] + s[12]*s[1] *s[10] - s[12]*s[2]*s[9];

  inv[2]  =   s[1]*s[6]*s[15] - s[1] *s[7]*s[14] - s[5] *s[2]*s[15]
            + s[5]*s[3]*s[14] + s[13]*s[2]*s[7]  - s[13]*s[3]*s[6];
  inv[6]  = - s[0]*s[6]*s[15] + s[0] *s[7]*s[14] + s[4] *s[2]*s[15]
            - s[4]*s[3]*s[14] - s[12]*s[2]*s[7]  + s[12]*s[3]*s[6];
  inv[10] =   s[0]*s[5]*s[15] - s[0] *s[7]*s[13] - s[4] *s[1]*s[15]
            + s[4]*s[3]*s[13] + s[12]*s[1]*s[7]  - s[12]*s[3]*s[5];
  inv[14] = - s[0]*s[5]*s[14] + s[0] *s[6]*s[13] + s[4] *s[1]*s[14]
            - s[4]*s[2]*s[13] - s[12]*s[1]*s[6]  + s[12]*s[2]*s[5];

  inv[3]  = - s[1]*s[6]*s[11] + s[1]*s[7]*s[10] + s[5]*s[2]*s[11]
            - s[5]*s[3]*s[10] - s[9]*s[2]*s[7]  + s[9]*s[3]*s[6];
  inv[7]  =   s[0]*s[6]*s[11] - s[0]*s[7]*s[10] - s[4]*s[2]*s[11]
            + s[4]*s[3]*s[10] + s[8]*s[2]*s[7]  - s[8]*s[3]*s[6];
  inv[11] = - s[0]*s[5]*s[11] + s[0]*s[7]*s[9]  + s[4]*s[1]*s[11]
            - s[4]*s[3]*s[9]  - s[8]*s[1]*s[7]  + s[8]*s[3]*s[5];
  inv[15] =   s[0]*s[5]*s[10] - s[0]*s[6]*s[9]  - s[4]*s[1]*s[10]
            + s[4]*s[2]*s[9]  + s[8]*s[1]*s[6]  - s[8]*s[2]*s[5];

  det = s[0]*inv[0] + s[1]*inv[4] + s[2]*inv[8] + s[3]*inv[12];
  if (det === 0) {
    return this;
  }

  det = 1 / det;
  for (i = 0; i < 16; i++) {
    d[i] = inv[i] * det;
  }

  return this;
};

/**
 * Calculate the inverse matrix of this, and set to this.
 * @return this
 */
Matrix4.prototype.invert = function() {
  return this.setInverseOf(this);
};

/**
 * Set the orthographic projection matrix.
 * @param left The coordinate of the left of clipping plane.
 * @param right The coordinate of the right of clipping plane.
 * @param bottom The coordinate of the bottom of clipping plane.
 * @param top The coordinate of the top top clipping plane.
 * @param near The distances to the nearer depth clipping plane. This value is minus if the plane is to be behind the viewer.
 * @param far The distances to the farther depth clipping plane. This value is minus if the plane is to be behind the viewer.
 * @return this
 */
Matrix4.prototype.setOrtho = function(left, right, bottom, top, near, far) {
  var e, rw, rh, rd;

  if (left === right || bottom === top || near === far) {
    throw 'null frustum';
  }

  rw = 1 / (right - left);
  rh = 1 / (top - bottom);
  rd = 1 / (far - near);

  e = this.elements;

  e[0]  = 2 * rw;
  e[1]  = 0;
  e[2]  = 0;
  e[3]  = 0;

  e[4]  = 0;
  e[5]  = 2 * rh;
  e[6]  = 0;
  e[7]  = 0;

  e[8]  = 0;
  e[9]  = 0;
  e[10] = -2 * rd;
  e[11] = 0;

  e[12] = -(right + left) * rw;
  e[13] = -(top + bottom) * rh;
  e[14] = -(far + near) * rd;
  e[15] = 1;

  return this;
};

/**
 * Multiply the orthographic projection matrix from the right.
 * @param left The coordinate of the left of clipping plane.
 * @param right The coordinate of the right of clipping plane.
 * @param bottom The coordinate of the bottom of clipping plane.
 * @param top The coordinate of the top top clipping plane.
 * @param near The distances to the nearer depth clipping plane. This value is minus if the plane is to be behind the viewer.
 * @param far The distances to the farther depth clipping plane. This value is minus if the plane is to be behind the viewer.
 * @return this
 */
Matrix4.prototype.ortho = function(left, right, bottom, top, near, far) {
  return this.concat(new Matrix4().setOrtho(left, right, bottom, top, near, far));
};

/**
 * Set the perspective projection matrix.
 * @param left The coordinate of the left of clipping plane.
 * @param right The coordinate of the right of clipping plane.
 * @param bottom The coordinate of the bottom of clipping plane.
 * @param top The coordinate of the top top clipping plane.
 * @param near The distances to the nearer depth clipping plane. This value must be plus value.
 * @param far The distances to the farther depth clipping plane. This value must be plus value.
 * @return this
 */
Matrix4.prototype.setFrustum = function(left, right, bottom, top, near, far) {
  var e, rw, rh, rd;

  if (left === right || top === bottom || near === far) {
    throw 'null frustum';
  }
  if (near <= 0) {
    throw 'near <= 0';
  }
  if (far <= 0) {
    throw 'far <= 0';
  }

  rw = 1 / (right - left);
  rh = 1 / (top - bottom);
  rd = 1 / (far - near);

  e = this.elements;

  e[ 0] = 2 * near * rw;
  e[ 1] = 0;
  e[ 2] = 0;
  e[ 3] = 0;

  e[ 4] = 0;
  e[ 5] = 2 * near * rh;
  e[ 6] = 0;
  e[ 7] = 0;

  e[ 8] = (right + left) * rw;
  e[ 9] = (top + bottom) * rh;
  e[10] = -(far + near) * rd;
  e[11] = -1;

  e[12] = 0;
  e[13] = 0;
  e[14] = -2 * near * far * rd;
  e[15] = 0;

  return this;
};

/**
 * Multiply the perspective projection matrix from the right.
 * @param left The coordinate of the left of clipping plane.
 * @param right The coordinate of the right of clipping plane.
 * @param bottom The coordinate of the bottom of clipping plane.
 * @param top The coordinate of the top top clipping plane.
 * @param near The distances to the nearer depth clipping plane. This value must be plus value.
 * @param far The distances to the farther depth clipping plane. This value must be plus value.
 * @return this
 */
Matrix4.prototype.frustum = function(left, right, bottom, top, near, far) {
  return this.concat(new Matrix4().setFrustum(left, right, bottom, top, near, far));
};

/**
 * Set the perspective projection matrix by fovy and aspect.
 * @param fovy The angle in degrees between the upper and lower sides of the frustum.
 * @param aspect The aspect ratio of the frustum. (width/height)
 * @param near The distances to the nearer depth clipping plane. This value must be plus value.
 * @param far The distances to the farther depth clipping plane. This value must be plus value.
 * @return this
 */
Matrix4.prototype.setPerspective = function(fovy, aspect, near, far) {
  var e, rd, s, ct;

  if (near === far || aspect === 0) {
    throw 'null frustum';
  }
  if (near <= 0) {
    throw 'near <= 0';
  }
  if (far <= 0) {fovy
    throw 'far <= 0';
  }

  fovy = Math.PI * fovy / 180 / 2;
  s = Math.sin(fovy);
  if (s === 0) {
    throw 'null frustum';
  }

  rd = 1 / (far - near);
  ct = Math.cos(fovy) / s;

  e = this.elements;

  e[0]  = ct / aspect;
  e[1]  = 0;
  e[2]  = 0;
  e[3]  = 0;

  e[4]  = 0;
  e[5]  = ct;
  e[6]  = 0;
  e[7]  = 0;

  e[8]  = 0;
  e[9]  = 0;
  e[10] = -(far + near) * rd;
  e[11] = -1;

  e[12] = 0;
  e[13] = 0;
  e[14] = -2 * near * far * rd;
  e[15] = 0;

  return this;
};

/**
 * Multiply the perspective projection matrix from the right.
 * @param fovy The angle in degrees between the upper and lower sides of the frustum.
 * @param aspect The aspect ratio of the frustum. (width/height)
 * @param near The distances to the nearer depth clipping plane. This value must be plus value.
 * @param far The distances to the farther depth clipping plane. This value must be plus value.
 * @return this
 */
Matrix4.prototype.perspective = function(fovy, aspect, near, far) {
  return this.concat(new Matrix4().setPerspective(fovy, aspect, near, far));
};

/**
 * Set the matrix for scaling.
 * @param x The scale factor along the X axis
 * @param y The scale factor along the Y axis
 * @param z The scale factor along the Z axis
 * @return this
 */
Matrix4.prototype.setScale = function(x, y, z) {
  var e = this.elements;
  e[0] = x;  e[4] = 0;  e[8]  = 0;  e[12] = 0;
  e[1] = 0;  e[5] = y;  e[9]  = 0;  e[13] = 0;
  e[2] = 0;  e[6] = 0;  e[10] = z;  e[14] = 0;
  e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;
  return this;
};

/**
 * Multiply the matrix for scaling from the right.
 * @param x The scale factor along the X axis
 * @param y The scale factor along the Y axis
 * @param z The scale factor along the Z axis
 * @return this
 */
Matrix4.prototype.scale = function(x, y, z) {
  var e = this.elements;
  e[0] *= x;  e[4] *= y;  e[8]  *= z;
  e[1] *= x;  e[5] *= y;  e[9]  *= z;
  e[2] *= x;  e[6] *= y;  e[10] *= z;
  e[3] *= x;  e[7] *= y;  e[11] *= z;
  return this;
};

/**
 * Set the matrix for translation.
 * @param x The X value of a translation.
 * @param y The Y value of a translation.
 * @param z The Z value of a translation.
 * @return this
 */
Matrix4.prototype.setTranslate = function(x, y, z) {
  var e = this.elements;
  e[0] = 1;  e[4] = 0;  e[8]  = 0;  e[12] = x;
  e[1] = 0;  e[5] = 1;  e[9]  = 0;  e[13] = y;
  e[2] = 0;  e[6] = 0;  e[10] = 1;  e[14] = z;
  e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;
  return this;
};

/**
 * Multiply the matrix for translation from the right.
 * @param x The X value of a translation.
 * @param y The Y value of a translation.
 * @param z The Z value of a translation.
 * @return this
 */
Matrix4.prototype.translate = function(x, y, z) {
  var e = this.elements;
  e[12] += e[0] * x + e[4] * y + e[8]  * z;
  e[13] += e[1] * x + e[5] * y + e[9]  * z;
  e[14] += e[2] * x + e[6] * y + e[10] * z;
  e[15] += e[3] * x + e[7] * y + e[11] * z;
  return this;
};

/**
 * Set the matrix for rotation.
 * The vector of rotation axis may not be normalized.
 * @param angle The angle of rotation (degrees)
 * @param x The X coordinate of vector of rotation axis.
 * @param y The Y coordinate of vector of rotation axis.
 * @param z The Z coordinate of vector of rotation axis.
 * @return this
 */
Matrix4.prototype.setRotate = function(angle, x, y, z) {
  var e, s, c, len, rlen, nc, xy, yz, zx, xs, ys, zs;

  angle = Math.PI * angle / 180;
  e = this.elements;

  s = Math.sin(angle);
  c = Math.cos(angle);

  if (0 !== x && 0 === y && 0 === z) {
    // Rotation around X axis
    if (x < 0) {
      s = -s;
    }
    e[0] = 1;  e[4] = 0;  e[ 8] = 0;  e[12] = 0;
    e[1] = 0;  e[5] = c;  e[ 9] =-s;  e[13] = 0;
    e[2] = 0;  e[6] = s;  e[10] = c;  e[14] = 0;
    e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;
  } else if (0 === x && 0 !== y && 0 === z) {
    // Rotation around Y axis
    if (y < 0) {
      s = -s;
    }
    e[0] = c;  e[4] = 0;  e[ 8] = s;  e[12] = 0;
    e[1] = 0;  e[5] = 1;  e[ 9] = 0;  e[13] = 0;
    e[2] =-s;  e[6] = 0;  e[10] = c;  e[14] = 0;
    e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;
  } else if (0 === x && 0 === y && 0 !== z) {
    // Rotation around Z axis
    if (z < 0) {
      s = -s;
    }
    e[0] = c;  e[4] =-s;  e[ 8] = 0;  e[12] = 0;
    e[1] = s;  e[5] = c;  e[ 9] = 0;  e[13] = 0;
    e[2] = 0;  e[6] = 0;  e[10] = 1;  e[14] = 0;
    e[3] = 0;  e[7] = 0;  e[11] = 0;  e[15] = 1;
  } else {
    // Rotation around another axis
    len = Math.sqrt(x*x + y*y + z*z);
    if (len !== 1) {
      rlen = 1 / len;
      x *= rlen;
      y *= rlen;
      z *= rlen;
    }
    nc = 1 - c;
    xy = x * y;
    yz = y * z;
    zx = z * x;
    xs = x * s;
    ys = y * s;
    zs = z * s;

    e[ 0] = x*x*nc +  c;
    e[ 1] = xy *nc + zs;
    e[ 2] = zx *nc - ys;
    e[ 3] = 0;

    e[ 4] = xy *nc - zs;
    e[ 5] = y*y*nc +  c;
    e[ 6] = yz *nc + xs;
    e[ 7] = 0;

    e[ 8] = zx *nc + ys;
    e[ 9] = yz *nc - xs;
    e[10] = z*z*nc +  c;
    e[11] = 0;

    e[12] = 0;
    e[13] = 0;
    e[14] = 0;
    e[15] = 1;
  }

  return this;
};
/**
 * Multiply the matrix for rotation from the right.
 * The vector of rotation axis may not be normalized.
 * @param angle The angle of rotation (degrees)
 * @param x The X coordinate of vector of rotation axis.
 * @param y The Y coordinate of vector of rotation axis.
 * @param z The Z coordinate of vector of rotation axis.
 * @return this
 */
Matrix4.prototype.rotate = function(angle, x, y, z) {
  return this.concat(new Matrix4().setRotate(angle, x, y, z));
};

/**
 * Set the viewing matrix.
 * @param eyeX, eyeY, eyeZ The position of the eye point.
 * @param centerX, centerY, centerZ The position of the reference point.
 * @param upX, upY, upZ The direction of the up vector.
 * @return this
 */
Matrix4.prototype.setLookAt = function(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ) {
  var e, fx, fy, fz, rlf, sx, sy, sz, rls, ux, uy, uz;

  fx = centerX - eyeX;
  fy = centerY - eyeY;
  fz = centerZ - eyeZ;

  // Normalize f.
  rlf = 1 / Math.sqrt(fx*fx + fy*fy + fz*fz);
  fx *= rlf;
  fy *= rlf;
  fz *= rlf;

  // Calculate cross product of f and up.
  sx = fy * upZ - fz * upY;
  sy = fz * upX - fx * upZ;
  sz = fx * upY - fy * upX;

  // Normalize s.
  rls = 1 / Math.sqrt(sx*sx + sy*sy + sz*sz);
  sx *= rls;
  sy *= rls;
  sz *= rls;

  // Calculate cross product of s and f.
  ux = sy * fz - sz * fy;
  uy = sz * fx - sx * fz;
  uz = sx * fy - sy * fx;

  // Set to this.
  e = this.elements;
  e[0] = sx;
  e[1] = ux;
  e[2] = -fx;
  e[3] = 0;

  e[4] = sy;
  e[5] = uy;
  e[6] = -fy;
  e[7] = 0;

  e[8] = sz;
  e[9] = uz;
  e[10] = -fz;
  e[11] = 0;

  e[12] = 0;
  e[13] = 0;
  e[14] = 0;
  e[15] = 1;

  // Translate.
  return this.translate(-eyeX, -eyeY, -eyeZ);
};

/**
 * Multiply the viewing matrix from the right.
 * @param eyeX, eyeY, eyeZ The position of the eye point.
 * @param centerX, centerY, centerZ The position of the reference point.
 * @param upX, upY, upZ The direction of the up vector.
 * @return this
 */
Matrix4.prototype.lookAt = function(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ) {
  return this.concat(new Matrix4().setLookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ));
};

/**
 * Multiply the matrix for project vertex to plane from the right.
 * @param plane The array[A, B, C, D] of the equation of plane "Ax + By + Cz + D = 0".
 * @param light The array which stored coordinates of the light. if light[3]=0, treated as parallel light.
 * @return this
 */
Matrix4.prototype.dropShadow = function(plane, light) {
  var mat = new Matrix4();
  var e = mat.elements;

  var dot = plane[0] * light[0] + plane[1] * light[1] + plane[2] * light[2] + plane[3] * light[3];

  e[ 0] = dot - light[0] * plane[0];
  e[ 1] =     - light[1] * plane[0];
  e[ 2] =     - light[2] * plane[0];
  e[ 3] =     - light[3] * plane[0];

  e[ 4] =     - light[0] * plane[1];
  e[ 5] = dot - light[1] * plane[1];
  e[ 6] =     - light[2] * plane[1];
  e[ 7] =     - light[3] * plane[1];

  e[ 8] =     - light[0] * plane[2];
  e[ 9] =     - light[1] * plane[2];
  e[10] = dot - light[2] * plane[2];
  e[11] =     - light[3] * plane[2];

  e[12] =     - light[0] * plane[3];
  e[13] =     - light[1] * plane[3];
  e[14] =     - light[2] * plane[3];
  e[15] = dot - light[3] * plane[3];

  return this.concat(mat);
}

/**
 * Multiply the matrix for project vertex to plane from the right.(Projected by parallel light.)
 * @param normX, normY, normZ The normal vector of the plane.(Not necessary to be normalized.)
 * @param planeX, planeY, planeZ The coordinate of arbitrary points on a plane.
 * @param lightX, lightY, lightZ The vector of the direction of light.(Not necessary to be normalized.)
 * @return this
 */
Matrix4.prototype.dropShadowDirectionally = function(normX, normY, normZ, planeX, planeY, planeZ, lightX, lightY, lightZ) {
  var a = planeX * normX + planeY * normY + planeZ * normZ;
  return this.dropShadow([normX, normY, normZ, -a], [lightX, lightY, lightZ, 0]);
};

/**
 *	Create rotation matrix from a given !UNIT-LENGTH! quaternion.
 * CAUTION!  forms WEIRD matrices from quaternions of other lengths!
 * @param qw the quaternion's 'real' coordinate
 * @param qx the quaternion's imaginary-i coord.
 * @param qy  "			"			"		imaginary-j coord.
 * @param qz  "			"			"		imaginary-k coord.
 *   -- Jack Tumblin 2/2014: from 'Math for 3D Game Programmng and CG"
 *													by Jed Lengyel, 34r Ed., pg. 91.
 */
Matrix4.prototype.setFromQuat = function(qx, qy, qz, qw) {
  var e = this.elements;
  e[0]=1 -2*qy*qy -2*qz*qz; e[4]=   2*qx*qy -2*qw*qz; e[8] =   2*qx*qz +2*qw*qy; 
  																																		e[12] = 0;
  e[1]=   2*qx*qy +2*qw*qz; e[5]=1 -2*qx*qx -2*qz*qz; e[9] =   2*qy*qz -2*qw*qx;
  																																		e[13] = 0;
  e[2]=   2*qx*qz -2*qw*qy; e[6]=   2*qy*qz +2*qw*qx; e[10]=1 -2*qx*qx -2*qy*qy;
  																																		e[14] = 0;
  e[3]= 0;  								e[7]= 0;  								e[11] = 0;  		e[15] = 1;
	return this;
}

/**
 * print matrix contents in console window:
 *			(J. Tumblin 2014.02.15; updated 2018.02.01)
 */
 Matrix4.prototype.printMe = function(opt_src) {
 var res = 5;
 var e = this.elements;   // why do this? just to make code more readable...
  if(opt_src && typeof opt_src === 'string') {  // called w/ string argument?
  // YES! use that string as our label:
   console.log('-------------------', opt_src, '-------------------------');
   console.log(	e[ 0].toFixed(res),'\t',e[ 4].toFixed(res),'\t', 
   							e[ 8].toFixed(res),'\t',e[12].toFixed(res));
   console.log(	e[ 1].toFixed(res),'\t',e[ 5].toFixed(res),'\t', 
   							e[ 9].toFixed(res),'\t',e[13].toFixed(res));
   console.log(	e[ 2].toFixed(res),'\t',e[ 6].toFixed(res),'\t', 
   							e[10].toFixed(res),'\t',e[14].toFixed(res));
   console.log(	e[ 3].toFixed(res),'\t',e[ 7].toFixed(res),'\t', 
   							e[11].toFixed(res),'\t',e[15].toFixed(res));
   console.log('-------------------', opt_src, '(end)--------------------\n');
  }
  else {   // No. use default labels:
   console.log('----------------------4x4 Matrix----------------------------');
   console.log(	e[ 0].toFixed(res),'\t',e[ 4].toFixed(res),'\t', 
   							e[ 8].toFixed(res),'\t',e[12].toFixed(res));
   console.log(	e[ 1].toFixed(res),'\t',e[ 5].toFixed(res),'\t', 
   							e[ 9].toFixed(res),'\t',e[13].toFixed(res));
   console.log(	e[ 2].toFixed(res),'\t',e[ 6].toFixed(res),'\t', 
   							e[10].toFixed(res),'\t',e[14].toFixed(res));
   console.log(	e[ 3].toFixed(res),'\t',e[ 7].toFixed(res),'\t', 
   							e[11].toFixed(res),'\t',e[15].toFixed(res));
   console.log('----------------------4x4 Matrix (end)----------------------\n');
  }
};
/**
 * Constructor of Vector3
 * If opt_src is specified, new vector is initialized by opt_src.
 * @param opt_src source vector(option)
 * JT: aVec = new Vector3(); // Makes zero-valued Vector3
 *     aVec = new Vector3([5,6,7]); // sets aVec to 5,6,7 -- don't forget []!!
 */
var Vector3 = function(opt_src) {
  var v = new Float32Array(3);
  if (opt_src && typeof opt_src === 'object') {
    v[0] = opt_src[0]; v[1] = opt_src[1]; v[2] = opt_src[2];
  } 
  this.elements = v;
}

/**
  * Normalize.
  * @return this
  */
Vector3.prototype.normalize = function() {
  var v = this.elements;
  // find the length of the vector:
  var c = v[0], d = v[1], e = v[2], g = Math.sqrt(c*c+d*d+e*e);
  if(g){              // if given vector had non-zero length,
    if(g == 1)        // AND that vector length is already 1.0,
        return this;  // DO NOTHING. Keep current vector contents.
   } else {           // ELSE we got an empty, undefined, or zero-length vector.
     v[0] = 0; v[1] = 0; v[2] = 0;  // set its elements to zero-length, and
     return this;     // return
   }
   // Nope; we have valid vector--adjust its length to 1.0.
   g = 1/g;
   v[0] = c*g; v[1] = d*g; v[2] = e*g;
   return this;
};

/** J. Tumblin 2018.02.13
  * Returns the (scalar) dot-product of the two Vector3 objects
  * As dot-products are commutative (order doesn't matter) then
  * either of these statements will result in the same 'myDot' result:
  *     myDot = aVec.dot(bVec);  // Dot product: a[0]*b[0] + a[1]*b[1] + a[2]*b[2] 
  *     myDot = bVec.dot(aVec);
  */   
Vector3.prototype.dot = function(opt_src) {
  var vA = this.elements; // short-hand for the calling object
  if(opt_src && typeof opt_src === 'object' && opt_src.hasOwnProperty('elements')) {
    var vB = opt_src.elements;  // short-hand for the Vector3 argument
    }
  else {
    console.log('ERROR! dot() function needs Vec3 argument! \n');
    return 0.0;
  }
  return vA[0]*vB[0] + vA[1]*vB[1] + vA[2]*vB[2];  // compute dot-product
};

/** J. Tumblin 2018.02.13
  * Returns Vector3 cross-product of current object and argument 
  * Careful! cross-products are NOT commutative! Ordering matters
  *     cVec = aVec.cross(bVec);  // finds aVec x bVec
  *     cVec = bVec.cross(aVec);   // finds bVec x aVec (== -aVec x bVec)
  */
Vector3.prototype.cross = function(opt_src) {
  var vA = this.elements;   // short-hand for the calling object
  var ans = new Vector3([0.0, 0.0, 0.0]);  // initialize to zero vector 
  var vC = ans.elements;    // get the Float32Array contents of 'ans'
  if(opt_src && typeof opt_src === 'object' && opt_src.hasOwnProperty('elements')) {
    var vB = opt_src.elements;  // short-hand for the Vector3 argument
    }
  else {
    console.log('ERROR! cross() function needs Vec3 argument! \n');
    return ans;
  }
  // compute cross-product
  vC[0] = vA[1]*vB[2] - vA[2]*vB[1];  // Cx = Ay*Bz - Az*By
  vC[1] = vA[2]*vB[0] - vA[0]*vB[2];  // Cy = Az*Bx - Ax*Bz
  vC[2] = vA[0]*vB[1] - vA[1]*vB[0];  // Cz = Ax*By - Ay*Bx
  return ans; 
};

/** J. Tumblin 2018.02.01
  * Print contents of Vector3 on console.
  * If you write:  
  *     var aVec3 = new Vector3([7,8,9]);
  *     aVec3.printMe();   // prints--  Vector3: 7.00  8.00  9.00
  *     aVec3.printMe('my aVec3');
  *                        // prints-- my aVec3: 7.00  8.00  9.00
  */
 Vector3.prototype.printMe = function(opt_src) {
 var res = 5;
  if (opt_src && typeof opt_src === 'string') {
     console.log(opt_src,':',
      this.elements[ 0].toFixed(res),'\t', 
      this.elements[ 1].toFixed(res),'\t', 
      this.elements[ 2].toFixed(res),'\n');
  } 
  else {
     console.log('Vector3:', 
      this.elements[ 0].toFixed(res),'\t',
      this.elements[ 1].toFixed(res),'\t', 
      this.elements[ 2].toFixed(res),'\n');
  }
};

/**
 * Constructor of Vector4
 * If opt_src is specified, new vector is initialized by opt_src.
 * @param opt_src source vector(option)
 */
var Vector4 = function(opt_src) {
  var v = new Float32Array(4);
  if (opt_src && typeof opt_src === 'object') {
    v[0] = opt_src[0]; v[1] = opt_src[1]; v[2] = opt_src[2]; v[3] = opt_src[3];
  } 
  this.elements = v;
}

/** J. Tumblin 2018.02.13
  * Returns the (scalar) dot-product of the two Vector4 objects
  * As dot-products are commutative (order doesn't matter) then
  * either of these statements will result in the same 'myDot' result:
  *     myDot = aVec.dot(bVec);  // = a[0]*b[0] + a[1]*b[1] + a[2]*b[2] + a[3]*b[3] 
  *     myDot = bVec.dot(aVec);
  */   
Vector4.prototype.dot = function(opt_src) {
  var vA = this.elements; // short-hand for the calling object

  if(opt_src && typeof opt_src === 'object' && opt_src.hasOwnProperty('elements')) {
    var vB = opt_src.elements;  // short-hand for the Vector3 argument
    }
  else {
    console.log('ERROR! dot() function needs Vec4 argument! \n');
    return 0.0;
  }
  if(vA[3]*vB[3] !== 0) {
    console.log('WARNING! Vector4.dot() given non-zero \'w\' values: NOT a geometric result!!'); 
    }
  return vA[0]*vB[0] + vA[1]*vB[1] + vA[2]*vB[2] + vA[3]*vB[3];  // compute dot-product
};

/** J. Tumblin 2018.02.13
  * Returns Vector3 cross-product of current object and argument 
  * Careful! cross-products are NOT commutative! Ordering matters
  *     cVec = aVec.cross(bVec);  // finds aVec x bVec
  *     cVec = bVec.cross(aVec);   // finds bVec x aVec (== -aVec x bVec)
  */
Vector4.prototype.cross = function(opt_src) {
  var vA = this.elements;   // short-hand for the calling object
  var ans = new Vector4([0.0, 0.0, 0.0, 0.0]); // initialize to zero vector
  var vC = ans.elements;    // get the Float32Array contents of 'ans'
  if(opt_src && typeof opt_src === 'object' && opt_src.hasOwnProperty('elements')) {
    var vB = opt_src.elements;  // short-hand for the Vector4 argument
    }
  else {
    console.log('ERROR! cross() function needs Vec4 argument! \n');
    return ans;
  }
  if(vA[3] !== 0 || vB[3] !== 0) {
    console.log('WARNING! cross() given non-zero \'w\' values: IGNORED!!!');
    }
  // compute cross-product
  vC[0] = vA[1]*vB[2] - vA[2]*vB[1];  // Cx = Ay*Bz - Az*By
  vC[1] = vA[2]*vB[0] - vA[0]*vB[2];  // Cy = Az*Bx - Ax*Bz
  vC[2] = vA[0]*vB[1] - vA[1]*vB[0];  // Cz = Ax*By - Ay*Bx
  vC[3] = 0.0;    // set w == 0 ALWAYS, because it's a vector result
  return ans; 
};

/** J. Tumblin 2018.02.01
  * Print contents of Vector4 on console.
  * If you write:  
  *     var bVec4 = new Vector4([7,8,9,1]);
  *     bVec4.printMe();   // prints--  Vector4: 7.00  8.00  9.00  1.00
  *     bVec4.printMe('bVec4--');
  *                        // prints--  bVec4--: 7.00  8.00  9.00  1.00
  */
Vector4.prototype.printMe = function(opt_src) {
 var res = 5;
  if (opt_src && typeof opt_src === 'string') { 
     console.log(opt_src,':',     // print the string argument given.
      this.elements[0].toFixed(res),'\t', 
      this.elements[1].toFixed(res),'\t', 
      this.elements[2].toFixed(res),'\t',
      this.elements[3].toFixed(res),'\n');
  } 
  else {                    // user called printMe() with NO args, so...
     console.log('Vector4:', 
      this.elements[0].toFixed(res),'\t',
      this.elements[1].toFixed(res),'\t', 
      this.elements[2].toFixed(res),'\t',
      this.elements[3].toFixed(res),'\n');
  }
};

/**
 * Additions by Adrien Katsuya Tateno
 * January 28, 2014
 *
 * pushMatrix(myMat)  
 * Puts contents of 'myMat' matrix on top of a push-down stack
 * @param myMat the matrix to store
 *
 * myMat = popMatrix()
 * Removes the top matrix from a push-down stack
 * @return the matrix found at the top of the stack
 */
 var __cuon_matrix_mod_stack = [];
function pushMatrix(mat) {
  __cuon_matrix_mod_stack.push(new Matrix4(mat));
}

function popMatrix() {
  return __cuon_matrix_mod_stack.pop();
}

/**====================QUATERNIONS===============================================
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/   <<== INSPIRING! visit site!
 * Written for the THREE.js library
 *
 * 2014.02.12 Modified by Jack Tumblin, Northwestern Univ.
 * 						for use in EECS 351-1 "Intro to Computer Graphics" class
 *						along with textbook "WebGL Programming Guide" (2013, Matsuda)
 *						but without the THREE.js graphics library.
 *	-- DROPPED original 'setFromEuler()' function because it doesn't follow the 
 * 			generally-accepted definition of Euler angles as described by Wikipedia.
 *				
 */

Quaternion = function( x, y, z, w ) {
//--------------------------------------
	this.set(
		x || 0,
		y || 0,
		z || 0,
		w !== undefined ? w : 1
	);

};

Quaternion.prototype = {
//--------------------------------------
	constructor: Quaternion,
	set: function ( x, y, z, w ) {
					this.x = x;
					this.y = y;
					this.z = z;
					this.w = w;
		return this;
	},

  clear: function ( ) {
//--------------------------------------
	this.x = 0.0;
	this.y = 0.0;
	this.z = 0.0;
	this.w = 1.0;
	},
	
	copy: function ( q ) {
//--------------------------------------
		this.x = q.x;
		this.y = q.y;
		this.z = q.z;
		this.w = q.w;
		return this;
	},
	
	printMe: function ( ) {
//---------------------------------------
// 2014.02:  J. Tumblin
	res = 5;		// # of digits to print on HTML 'console'
	console.log('Quaternion: x=', this.x.toFixed(res), 
										    'i\ty=', this.y.toFixed(res), 
												'j\tz=', this.z.toFixed(res), 
									 'k\t(real)w=', this.w.toFixed(res),'\n');
	},
	
	
	setFromAxisAngle: function ( ax, ay, az, angleDeg) {
//--------------------------------------
// Good tutorial on rotations; code inspiration at:
//http://www.euclideanspace.com/maths/geometry/rotation
//                          /conversions/angleToQuaternion/index.htm
// Be sure we have a normalized x,y,z 'axis' argument before we start:
		var mag2 = ax*ax + ay*ay + az*az;	// axis length^2
		if(mag2-1.0 > 0.0000001 || mag2-1.0 < -0.0000001) {
			var normer = 1.0/Math.sqrt(mag2);
			ax *= normer;
			ay *= normer;
			az *= normer;
		}

		var halfAngle = angleDeg * Math.PI / 360.0;	// (angleDeg/2) * (2*pi/360)
		var s = Math.sin( halfAngle );
		this.x = ax * s;
		this.y = ay * s;
		this.z = az * s;
		this.w = Math.cos( halfAngle );
		return this;
	},
	
	setFromEuler: function ( alphaDeg, betaDeg, gammaDeg ) {
//--------------------------------------
// (Original function used non-standard definitions).
// Euler angles: http://en.wikipedia.org/wiki/Euler_angles
// rotate your 'current drawing axes' in 3 steps:
// 1) rotate around z-axis by angle alpha 
//			(makes a new, 2nd set of x,y,z axes to use for
//			drawing vertices. From these, we take the next step:) 
// 2) rotate around x-axis by angle beta
//			(makes a new, 3rd set of x,y,z axes to use for
//			drawing vertices.  From these, we take the next step:)
// 3) rotate around z-axis (again!) by angle gamma.
//			(makes a final, 4th set of x,y,z axes to use for 
// 			drawing vertices.  These axes are our final result. 
//
// accepts rotations in DEGREES

		console.log('NOT WRITTEN YET.  WRITE YOUR OWN.'); 

		this.w = 1;
	  this.x = 0;
		this.y = 0;
		this.z = 0;
		return this;
	},

	setFromRotationMatrix: function ( m ) {
//--------------------------------------
// Adapted from: http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

		function copySign(a, b) {
			return b < 0 ? -Math.abs(a) : Math.abs(a);
		}
		var absQ = Math.pow(m.determinant(), 1.0 / 3.0);
		this.w = Math.sqrt( Math.max( 0, absQ + m.n11 + m.n22 + m.n33 ) ) / 2;
		this.x = Math.sqrt( Math.max( 0, absQ + m.n11 - m.n22 - m.n33 ) ) / 2;
		this.y = Math.sqrt( Math.max( 0, absQ - m.n11 + m.n22 - m.n33 ) ) / 2;
		this.z = Math.sqrt( Math.max( 0, absQ - m.n11 - m.n22 + m.n33 ) ) / 2;
		this.x = copySign( this.x, ( m.n32 - m.n23 ) );
		this.y = copySign( this.y, ( m.n13 - m.n31 ) );
		this.z = copySign( this.z, ( m.n21 - m.n12 ) );
		this.normalize();
		return this;
	},

	calculateW : function () {
//--------------------------------------
		this.w = - Math.sqrt( Math.abs( 
		             1.0 - this.x * this.x - this.y * this.y - this.z * this.z ) );
		return this;
	},

	inverse: function () {
//--------------------------------------
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
		return this;
	},

	length: function () {
//--------------------------------------\
		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );
	},

	normalize: function () {
//--------------------------------------
		var len = Math.sqrt(this.x * this.x + 
												this.y * this.y + 
												this.z * this.z + 
												this.w * this.w );
		if ( len === 0 ) {
			this.x = 0;
			this.y = 0;
			this.z = 0;
			this.w = 0;
		} 
		else {
			len = 1 / len;
			this.x = this.x * len;
			this.y = this.y * len;
			this.z = this.z * len;
			this.w = this.w * len;
		}
		return this;
	},

	multiplySelf: function ( quat2 ) {
//--------------------------------------
		var qax = this.x,  qay = this.y,  qaz = this.z,  qaw = this.w,
		    qbx = quat2.x, qby = quat2.y, qbz = quat2.z, qbw = quat2.w;

		this.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
		this.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
		this.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
		this.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
		return this;
	},

	multiply: function ( q1, q2 ) {
//--------------------------------------
// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
		this.x =  q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x;
		this.y = -q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y;
		this.z =  q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z;
		this.w = -q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w;
		return this;

	},

	multiplyVector3: function ( vec, dest ) {
//--------------------------------------
		if( !dest ) { dest = vec; }
		var x    = vec.x,  y  = vec.y,  z  = vec.z,
			 qx   = this.x, qy = this.y, qz = this.z, qw = this.w;
			 
		// calculate quat * vec:
		var ix =  qw * x + qy * z - qz * y,
				iy =  qw * y + qz * x - qx * z,
				iz =  qw * z + qx * y - qy * x,
				iw = -qx * x - qy * y - qz * z;
		// calculate result * inverse quat:
		dest.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
		dest.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
		dest.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
		return dest;
	}
}

Quaternion.slerp = function ( qa, qb, qm, t ) {
//--------------------------------------
// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

	var cosHalfTheta = qa.w * qb.w + qa.x * qb.x + qa.y * qb.y + qa.z * qb.z;

	if (cosHalfTheta < 0) {
		qm.w = -qb.w; 
		qm.x = -qb.x; 
		qm.y = -qb.y; 
		qm.z = -qb.z;
		cosHalfTheta = -cosHalfTheta;
	} 
	else {	qm.copy(qb);	}

	if ( Math.abs( cosHalfTheta ) >= 1.0 ) {
		qm.w = qa.w; 
		qm.x = qa.x; 
		qm.y = qa.y; 
		qm.z = qa.z;
		return qm;
	}

	var halfTheta = Math.acos( cosHalfTheta ),
	sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

	if ( Math.abs( sinHalfTheta ) < 0.0001 ) {
		qm.w = 0.5 * ( qa.w + qb.w );
		qm.x = 0.5 * ( qa.x + qb.x );
		qm.y = 0.5 * ( qa.y + qb.y );
		qm.z = 0.5 * ( qa.z + qb.z );
		return qm;
	}

	var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
	ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

	qm.w = ( qa.w * ratioA + qm.w * ratioB );
	qm.x = ( qa.x * ratioA + qm.x * ratioB );
	qm.y = ( qa.y * ratioA + qm.y * ratioB );
	qm.z = ( qa.z * ratioA + qm.z * ratioB );
	return qm;
}